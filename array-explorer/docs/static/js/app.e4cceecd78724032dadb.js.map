{"version":3,"sources":["webpack:///./store/nl/meta.json","webpack:///./store/es/meta.json","webpack:///./store/zh_cn/index.js","webpack:///./store/ar/index.js","webpack:///./store/el/meta.json","webpack:///./store/pt/meta.json","webpack:///./store/ru/meta.json","webpack:///./store/id/index.js","webpack:///./store/pt/index.js","webpack:///./store/ar/meta.json","webpack:///./store [a-z]{2}","webpack:///./store/zh_cn/meta.json","webpack:///./store/id/meta.json","webpack:///./store/el/index.js","webpack:///./store/de/index.js","webpack:///./store/ja/meta.json","webpack:///./store/sr/meta.json","webpack:///./store/cz/meta.json","webpack:///src/components/methods/MethodBase.vue","webpack:///./src/components/methods/MethodBase.vue?4710","webpack:///./src/components/methods/MethodBase.vue","webpack:///src/components/methods/MethodChoice.vue","webpack:///./src/components/methods/MethodChoice.vue?eda3","webpack:///src/components/AppMethodPrimary.vue","webpack:///./src/components/methods/MethodChoice.vue","webpack:///./src/components/AppMethodPrimary.vue?36b6","webpack:///./src/components/AppMethodPrimary.vue","webpack:///./src/components/AppGithubCorner.vue?9523","webpack:///./src/components/AppGithubCorner.vue","webpack:///src/components/LocaleSwitcher.vue","webpack:///./src/components/LocaleSwitcher.vue?0074","webpack:///./src/components/LocaleSwitcher.vue","webpack:///src/components/AppCode.vue","webpack:///./src/components/AppCode.vue?b8f4","webpack:///./src/components/AppCode.vue","webpack:///src/App.vue","webpack:///./src/App.vue?62ff","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./store/ua/meta.json","webpack:///./store/tr/index.js","webpack:///./store/sr/index.js","webpack:///./store/fr/meta.json","webpack:///./store/bg/meta.json","webpack:///./store/bg/index.js","webpack:///./store/fr/index.js","webpack:///./store/tr/meta.json","webpack:///./store/en/index.js","webpack:///./store/ja/index.js","webpack:///./store/de/meta.json","webpack:///./store/it/meta.json","webpack:///./store/es/index.js","webpack:///./store/en/meta.json","webpack:///./store/it/index.js","webpack:///./store/nl/index.js","webpack:///./store/ru/index.js","webpack:///./store/ua/index.js","webpack:///./store/index.js","webpack:///./src/locale/ar/index.js","webpack:///./src/locale/bg/index.js","webpack:///./src/locale/en/index.js","webpack:///./src/locale/es/index.js","webpack:///./src/locale/de/index.js","webpack:///./src/locale/fr/index.js","webpack:///./src/locale/nl/index.js","webpack:///./src/locale/pt/index.js","webpack:///./src/locale/zh_cn/index.js","webpack:///./src/locale/cz/index.js","webpack:///./src/locale/ru/index.js","webpack:///./src/locale/ua/index.js","webpack:///./src/locale/id/index.js","webpack:///./src/locale/sr/index.js","webpack:///./src/locale/it/index.js","webpack:///./src/locale/el/index.js","webpack:///./src/locale/tr/index.js","webpack:///./src/locale/ja/index.js","webpack:///./store/cz/index.js"],"names":["module","exports","short","long","createdBy","__webpack_exports__","state","selectedMethod","adding","name","shortDesc","desc","example","output","removing","string","ordering","other","iterate","find","single","many","map","./ar","./ar/","./ar/index","./ar/index.js","./ar/meta","./ar/meta.json","./bg","./bg/","./bg/index","./bg/index.js","./bg/meta","./bg/meta.json","./cz","./cz/","./cz/index","./cz/index.js","./cz/meta","./cz/meta.json","./de","./de/","./de/index","./de/index.js","./de/meta","./de/meta.json","./el","./el/","./el/index","./el/index.js","./el/meta","./el/meta.json","./en","./en/","./en/index","./en/index.js","./en/meta","./en/meta.json","./es","./es/","./es/index","./es/index.js","./es/meta","./es/meta.json","./fr","./fr/","./fr/index","./fr/index.js","./fr/meta","./fr/meta.json","./id","./id/","./id/index","./id/index.js","./id/meta","./id/meta.json","./index","./index.js","./it","./it/","./it/index","./it/index.js","./it/meta","./it/meta.json","./ja","./ja/","./ja/index","./ja/index.js","./ja/meta","./ja/meta.json","./nl","./nl/","./nl/index","./nl/index.js","./nl/meta","./nl/meta.json","./pt","./pt/","./pt/index","./pt/index.js","./pt/meta","./pt/meta.json","./ru","./ru/","./ru/index","./ru/index.js","./ru/meta","./ru/meta.json","./sr","./sr/","./sr/index","./sr/index.js","./sr/meta","./sr/meta.json","./tr","./tr/","./tr/index","./tr/index.js","./tr/meta","./tr/meta.json","./ua","./ua/","./ua/index","./ua/index.js","./ua/meta","./ua/meta.json","./zh_cn","./zh_cn/","./zh_cn/index","./zh_cn/index.js","./zh_cn/meta","./zh_cn/meta.json","webpackContext","req","__webpack_require__","webpackContextResolve","id","Error","keys","Object","resolve","MethodBase","props","urlPath","type","String","default","methods_MethodBase","render","_h","this","$createElement","_c","_self","_t","_v","staticClass","attrs","href","target","staticRenderFns","MethodChoice","components","normalizeComponent","ssrContext","methodType","required","options","Array","data","selected","computed","isSelected","$store","watch","commit","methods_MethodChoice","_vm","for","_s","$t","directives","rawName","value","expression","on","change","$event","$$selectedVal","prototype","filter","call","o","_value","multiple","disabled","_l","option","key","domProps","slot","innerHTML","res","AppMethodPrimary","MethodChoice_normalizeComponent","selectedFilter","selectedFind","extends_default","forEach","prop","curLanguage","components_AppMethodPrimary","_e","src_components_AppMethodPrimary","AppMethodPrimary_normalizeComponent","AppGithubCorner","aria-label","staticStyle","fill","color","position","top","border","right","width","height","viewBox","aria-hidden","d","transform-origin","components_AppGithubCorner","AppGithubCorner_normalizeComponent","LocaleSwitcher","selectedLanguage","languages","newLang","console","log","components_LocaleSwitcher","_m","val","src_components_LocaleSwitcher","LocaleSwitcher_normalizeComponent","AppCode","methods","typeOut","split","SplitText","$refs","ex","split2","ex2","tl","esm","add","to","opacity","staggerFromTo","chars","scale","transformOrigin","ease","easeOut","staggerTo","easeIn","selectedUsage","_this","TweenMax","set","setTimeout","components_AppCode","ref","margin-top","App","AppCode_normalizeComponent","selectortype_template_index_0_src_App","src_App","App_normalizeComponent","vue_esm","use","src","config","productionTip","el","store","template","ctx","values","endsWith","index","indexOf","meta","vuex_esm","mutations","[object Object]","i18n","Store","modules","ar","bg","es","en","de","fr","nl","pt","zh_cn","sr","cz","ru","ua","it","tr","ja","undefined","vuex_i18n_es","plugin","firstMethod","findMethod","methodOptions","methodTypes","remove","iterate by","singleItem","manyItems","primaryOptions"],"mappings":"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","file":"static/js/app.e4cceecd78724032dadb.js","sourcesContent":["module.exports = {\"short\":\"nl\",\"long\":\"Dutch\",\"createdBy\":\"glenngijsberts\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/nl/meta.json\n// module id = /7gC\n// module chunks = 1","module.exports = {\"short\":\"es\",\"long\":\"Spanish\",\"createdBy\":\"Gonzalo2310\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/es/meta.json\n// module id = /TCW\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: '一个或多个元素到数组',\n        desc: '添加、删除或替换数组中的元素。',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: '元素到数组的末尾',\n        desc:\n          '将一个或多个元素添加到数组的末尾，并返回数组的新长度。',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: '元素到数组的开头',\n        desc:\n          '将一个或多个元素添加到数组的开头，并返回数组的新长度。',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: '其他数组或值到这个数组',\n        desc:\n          '返回由这个数组与其他数组或值组成的新数组。',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: '数组中一个或多个元素',\n        desc: '添加、删除或替换数组中的元素。',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: '数组的最后一个元素',\n        desc:\n          '从数组中删除最后一个元素并返回该元素。',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: '数组的第一个元素',\n        desc:\n          '从数组中移除第一个元素并返回该元素。',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          '一个或多个才能使用，保持原数组不变。',\n        desc:\n          '<code>slice()</code>方法返回一个新的数组，是对原数组部分的浅拷贝。可以只传入<code> begin </code>开始位置参数（<code> end </code>结束位置将默认为数组的长度），或者都传入<code> slice(begin, end) </code>。原数组不会被修改。',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: '把数组中的所有元素转换为字符串',\n        desc: `把数组中的所有元素转换为字符串。可以按原样，或者在中间加入<code>elements.join('-')</code>返回<code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: '返回一个表示数组的字符串。',\n        desc: '返回表示数组和它元素的字符串。',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: '返回表示该数组的本地化字符串。',\n        desc:\n          '这个有点怪。返回表示数组及其元素的本地化字符串。这对日期和货币是非常有用，有一些奇怪的原生抽象，所以最好使用时参考文档。',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: '反转数组中的元素顺序。',\n        desc:\n          '反转数组中元素的顺序 - 第一个变成最后一个，最后一个变成第一个。',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: '对数组中元素进行排序。',\n        desc: `对数组中的元素进行排序并返回数组。<br>\n        <br>\n        <strong>注意：</strong>如果没有给出用于比较的函数，数组中的元素会被转换成字符串后再比较，然后以 Unicode 的顺序进行排序。在对数字进行排序的时候，9 本来应该排在 80 前面，但因为数字会被转换成字符串，而按照 Unicode 的顺序，“80”会排在“9”前面。详细信息可查看文档。`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: '查询数组的长度',\n        desc: '返回数组中元素的数目。',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: '用静态值填充数组的所有元素',\n        desc:\n          '用一个静态值从开始索引到结束索引填充数组的所有元素。',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: '复制数组中的一系列数组元素。',\n        desc:\n          '复制数组中的一系列数组元素。可以只传入<code> end </code>结束位置参数（<code> begin </code>开始位置将默认为 0），或者都传入<code> copyWithin(begin, end) </code>',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: '为每个元素都执行一次回调函数。',\n        desc:\n          'The forEach() 方法为每个元素都执行一次回调函数。',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          '回调函数处理每个元素并利用返回一个新数组',\n        desc:\n          '通过指定函数处理数组的每个元素，并返回处理后的数组。',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: '创建一个迭代器对象',\n        desc:\n          'entries() 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。迭代器有很多用途，还有其他与之结合使用的方法，如<code>values</code> 和 <code>keys</code>方法',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: '某个元素是否存在',\n          desc:\n            '确定数组是否包含某个元素，并根据需要返回true或false。',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: '给定元素的第一个索引',\n          desc:\n            '返回数组中可以找到给定元素的第一个索引，如果不存在则返回-1。',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: '给定元素的最后一个索引',\n          desc:\n            '返回一个给定元素最后出现的位置，如果不存在则返回-1。',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: '满足条件的第一个元素',\n          desc:\n            '如果数组中的元素满足提供的回调函数，则返回数组中找到的值。如果未找到，则返回undefined。类似于<code>findIndex()</code>，但它返回的是项目而不是索引。',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: '满足条件的第一个元素的索引',\n          desc:\n            '返回数组中满足提供的回调函数的第一个元素的索引，否则返回-1，与<code> find() </ code>类似，但它返回索引而不是项目。',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: '从头到尾将数组元素计算为一个值',\n          desc:\n            '接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: '从尾到头将数组元素计算为一个值。',\n          desc:\n            '接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值。',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: '返回符合条件所有元素的数组',\n          desc:\n            '创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: '每个元素是否都符合条件',\n          desc:\n            '如果数组中的每个元素满足指定函数，则返回true。',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: '至少有一个元素符合指定条件',\n          desc:\n            '如果数组中的至少一个元素满足指定函数，则返回true。',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/zh_cn/index.js\n// module id = 059H\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'عنصر أو أكثر للمصفوفة',\n        desc: 'تضيف و/أو تحذف عناصر من المصفوفة.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'عناصر إلى نهاية المصفوفة',\n        desc:\n          'إضافة عنصر أو أكثر إلى نهاية المصفوفة وتعيد الطول الجديد للمصفوفة.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'عناصر إلى بداية المصفوفة',\n        desc:\n          'إضافة عنصر أو أكثر إلى بداية المصفوفة وتعيد الطول الجديد للمصفوفة.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'هذه المصفوفة إلى مصفوفة أو أكثر و/أو قيمة أو أكثر',\n        desc:\n          'تعيد المصفوفة المكونة من هذه المصوفة مع مصفوفة أو أكثر و/أو قيمة أكثر الأخرى.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'عنصر أو أكثر من المصفوفة',\n        desc: 'تضيف و/أو تحذف عناصر من المصفوفة.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'العنصر الأخير في المصفوفة',\n        desc: 'تحذف العنصر الأخير في المصفوفة وتعيد هذا العنصر.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'العنصر الأول من المصفوفة',\n        desc: 'تحذف العنصر الأول من المصفوفة وتعيد هذا العنصر.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'عنصر أو أكثر من المصفوفة للاستخدام ، تاركة المصفوفة الأصلية كما هي',\n        desc:\n          'الدالة <code>slice()</code> تعيد نسخة مصغرة لجزء من مصفوفة إلى عنصر مصفوفة جديد . بإمكانك إما تحديد العنصر الأخير ( حيث أن العنصر الأول الافتراضي سيكون صفر ) أو بإمكانك تحديد البداية والنهاية, مفصولين بفاصلة , comma-separated. المصفوفة الأصلية لن يتم تعديلها.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'دمج جميع عناصر المصفوفة في سلسلة نصية واحدة',\n        desc: `دمج جميع عناصر المصفوفة في سلسلة نصية . بإمكانك دمجهم مع بعض كماهم أو مع فاصل بينهم, <code>elements.join(' -\n          ')</code> تعطيك <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'تعيد سلسلة نصية تمثل هذه المصفوفة.',\n        desc: 'تعيد سلسلة نصية تمثل المصفوفة وعناصرها.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'تعيد سلسلة نصية (محلية- تمثل البلد الحالي ) تمثل المصفوفة.',\n        desc:\n          'هذه الدالة فيها قليل من الجنون. تعيد سلسلة نصية (محلية- تمثل البلد الحالي ) تمثل المصفوفة وعناصرها. هذه الدالة مفيدة للتواريخ والعملات وكذلك بعض الاختصارات المحلية الغريبة, لذلك يستحسن مراجعة التوثيق الخاص بها',\n        example: `let date = [new Date()];<br>\n        arr.toLocaleString();<br>\n        date.toLocaleString();<br>\n        console.log(arr, date);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 م\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'تعكس ترتيب عناصر المصفوفة',\n        desc:\n          'تعكس ترتيب عناصر المصفوفة بمكانهم - بحيث الأول يصبح الأخير والأخير يصبح الأول.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'ترتيب عناصر المصفوفة',\n\n          desc: `ترتب عناصر المصفوفة المحددة وترجع مصفوفة مرتبة.<br>\n        <br>\n        <strong>ملاحطة مهمة:</strong> إذا لم يتم كتابة دالة الترتيب ، سيتم ترتيب العناصر عن طريق تحويلهم إلى سلاسل ومقارنة على أساس ترتيبهم ضمن الـ Unicode الخاص بهم.على سبيل المثال، \"Banana\" تأتي قبل \"cherry\". في الترتيب بالنسبة للأرقام، فإن 9 تأتي قبل 80 ، وذلك لأنه تم تحويل الأرقام إلى سلاسل نصية ، و \"80\" تأتي قبل \"9\"  في ترتيب الرموز ضمن الـ Unicode . التوثيق في الكثير من المعلومات للتوضيح.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'معرفة طول المصفوفة',\n        desc: 'تعيد عدد العناصر في هذه المصفوفة.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'تعبية جميع عناصر المصفوفة بقيمة ثابتة',\n        desc:\n          'تقوم بتعبئة جميع عناصر المصفوفة ابتداءً من عنوان البداية إلى عنوان النهاية بقيم .',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'نسخ سلسلة من عناصر المصفوفة ضمن المصفوفة.',\n        desc:\n          'تقوم بنسخ سلسلة من عناصر المصوفة ضمن المصفوفة نفسها . بإمكانك تحديد العنصر الأخير فقط ( حيث العنصر الأول سيكون الافتراضي صفر ) أو بإمكانك تحديد العنصر الأول والأ×ير مفصولين بفاصلة , comma-separated.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'تنفيذ دالة سأقوم بإنشاء (for each) للعنصر',\n        desc:\n          'دالة الـ forEach() تقوم بتنفيذ دالة معينة مرة واحد لكل من عناصر المصفوفة.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          ' تقوم بإنشاء مصفوفة جديدة من كل عنصر بإستخدام دالة أقوم بإنشاءها',\n        desc:\n          'تقوم بإنشاء مصفوفة جديدة بإستخدام النتيجة  الراجعة من استدعاء دالة معينة على جميع العناصر في هذه المصفوفة.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'تنش عنصر تكرار  (iterator object)',\n        desc:\n          'تعيد عنصر تكرار جديد للمصفوفة والذي يحتوي على أزواج الـ key/value لكل عنوان (index) في هذه المصفوفة. توجد استخدامات كثيرة للتكرارات (iterators), وكذلك دوال أخرى تستخدم معها, مثل <code>values</code> و <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'تعيد إذا كان عنصر معين موجود',\n          desc:\n            'تقرر فيما إذا كانت مصفوفة معينة تحتوي على عنصر معين ، وتعيد true أو false بما يناسب الحالة.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'العنوان الأول لعنصر معين',\n          desc:\n            'تعيد أول عنوان حيث يمكن العثور على عنصر معين في مصفوفة, أو -1 إذا لم يتم العثور عليه.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'العنوان الأخير لعنصر معين',\n          desc:\n            'تعيد آخر ( أكبر ) عنوان لعنصر معين ضمن مصفوفة مساوي للقيمة المحددة , أو -1 إذا كان غير موجود.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'أول عنصر يطابق شرط معين',\n          desc:\n            'تعيد القيمة التي تم العثور عليها في المصوفة ، إذا وجد عنصر يطابق  لدالة الفحص المعينة أو غير معرف ( undefined ) إذا لم يتم العثور عليه. مشابهة لـ <code>findIndex()</code>, ولكنها تعيد العنصر عوضا عن العنوان (index).',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'أول عنوان (index) للعصر الذي يطابق شرط معين',\n          desc:\n            'تعيد أول عنوان (index) لعنصر معين في مصفوفة إذا طابق دالة الفحص المعينة . أو  -1 إذا لم يطابق. مماثلة لـ <code>find()</code>, ولكنها تعيد العنوان (index) عوضا عن العنصر.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'قيمة بواسطة تصغير المصفوفة ، من البداية للنهاية',\n          desc:\n            'تنفيذ دالة على مراكم وكل قيمة في المصفوفة ( من اليسار إلى اليمين ) لتقليصها إلى قيمة واحدة.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'قيمة بواسطة تصغير المصفوفة ، من النهاية إلى البداية',\n          desc:\n            'تنفيذ دالة على مراكم وكل قيمة في المصفوفة ( من اليمين إلى اليسار ) لتقليصها إلى قيمة واحدة.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'قيم بناء على شرط أقوم بتحديده',\n          desc:\n            'تعيد مصفوفة جديد تحتوى على جميع عناصر هذه المصفوفة التي نتيجة دالة الترشيح true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'فيما إذا  كانت جميع العناصر تطابق شرط معين أو لا',\n          desc: 'تعيد (true) إذا كانت جميع القيم تطابق دالة الفحص.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'فيما إذا طابق عنصر واحد على الأقل شرط معين أو لا',\n          desc:\n            'تعيد (true) إذا طابق على الأقل عنصر واحد من هذه المصفوفة لدالة الفحص.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ar/index.js\n// module id = 0iGN\n// module chunks = 1","module.exports = {\"short\":\"el\",\"long\":\"Greek\",\"createdBy\":\"loremaps\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/el/meta.json\n// module id = 0wYN\n// module chunks = 1","module.exports = {\"short\":\"pt\",\"long\":\"Portuguese\",\"createdBy\":\"welll\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/pt/meta.json\n// module id = 7Duw\n// module chunks = 1","module.exports = {\"short\":\"ru\",\"long\":\"Russian\",\"createdBy\":\"TheElderMindseeker\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ru/meta.json\n// module id = 7Zqp\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'satu atau lebih elemen ke sebuah array',\n        desc: 'Menambah dan/atau menghilangkan satu atau lebih elemen dari sebuah array.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'satu atau lebih elemen pada posisi akhir dari sebuah array',\n        desc:\n          'Menambah satu atau lebih elemen pada posisi akhir dari sebuah array dan mengembalikan panjang array yang baru.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'satu atau lebih elemen pada posisi awal dari sebuah array',\n        desc:\n          'Menambah satu atau lebih elemen pada posisi awal dari sebuah array dan mengembalikan panjang array yang baru.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'array yang dipanggil ke satu atau lebih array dan/atau nilai lain',\n        desc:\n          'Mengembalikan sebuah array yang terdiri dari array yang dipanggil dan digabung dengan satu atau lebih array dan/atau nilai lain.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'satu atau lebih elemen dari sebuah array',\n        desc: 'Menambah dan/atau menghapus satu atau lebih elemen dari sebuah array.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'elemen terakhir dari array',\n        desc:\n          'Menghapus elemen terakhir dari sebuah array dan mengembalikan elemen tersebut.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'elemen pertama dari array',\n        desc:\n          'Menghapus elemen pertama dari sebuah array dan mengembalikan elemen tersebut.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'satu atau lebih elemen secara berurutan untuk digunakan, tanpa memodifikasi array asli',\n        desc:\n          'Metode <code>slice()</code> mengembalikan shallow copy dari suatu bagian array ke sebuah objek array baru. Anda dapat memberi spesifikasi elemen awalnya saja (di mana nilai posisi akhir akan sesuai dengan panjang array) atau kedua posisi awal dan akhir, dengan koma sebagai pemisahnya. Array yang asli tidak akan dimodifikasi.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'menggabungkan semua elemen dari sebuah array menjadi sebuah string',\n        desc: `menggabungkan semua elemen dari sebuah array menjadi sebuah string. Anda juga dapat menggabungkannya dengan menggunakan sebuah pemisah di antara elemen-elemen tersebut. Sebagai contoh, <code>elements.join(' -\n          ')</code> akan menghasilkan <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'mengembalikan sebuah string yang merepresentasikan array',\n        desc: 'Mengembalikan sebuah string yang merepresentasikan array dan elemen-elemen array tersebut.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'mengembalikan sebuah string yang telah dilokalisasi yang merepresentasikan array',\n        desc:\n          'Mengembalikan sebuah string yang telah dilokalisasi yang merepresentasikan array beserta elemen-elemennya. Metode ini berguna untuk tanggal-tanggal dan mata uang, serta memiliki abstraksi native yang cukup aneh, sehingga sebaiknya Anda membaca dokumentasinya ketika menggunakannya.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'membalikkan urutan dari array',\n        desc:\n          'Mengembalikan urutan dari elemen-elemen yang ada pada array di tempat — elemen pertama menjadi yang terakhir, dan elemen yang terakhir menjadi yang pertama.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'mengurutkan item-item pada array',\n        desc: `Mengurutkan elemen-elemen dari sebuah array di tempat dan mengembalikan array tersebut.<br>\n        <br>\n        <strong>Catatan penting:</strong> Apabila compareFunction tidak diberikan, maka elemen-elemen akan diurutkan dengan cara mengubah elemen-elemen tersebut menjadi string, dan membandingkan string-string tersebut dengan mengacu pada urutan Unicode code point. Sebagai contoh, \"Banana\" ditempatkan sebelum \"cherry\". Dalam urutan numerik, 9 ditempatkan sebelum 80, namun karena angka-angka diubah menjadi string, maka \"80\" ditempatkan sebelum \"9\" sesuai dengan urutan Unicode. Dokumentasi metode ini mempunyai lebih banyak informasi untuk memperjelas.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'menemukan panjang dari array',\n        desc: 'Mengembalikan jumlah elemen pada array.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'mengisi semua elemen dari array dengan sebuah nilai statis',\n        desc:\n          'Mengisi semua elemen dari sebuah array mulai dari indeks awal sampai indeks terakhir dengan sebuah nilai statis.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'menyalin sebuah urutan dari elemen-elemen array di dalam array',\n        desc:\n          'Menyalin sebuah urutan dari elemen-elemen array di dalam array. Anda dapat memberi spesifikasi elemen akhirnya saja (di mana posisi awal akan dimulai dari nol) atau kedua posisi awal dan akhir, dengan koma sebagai pemisahnya.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'mengeksekusi sebuah fungsi yang saya buat untuk masing-masing elemen',\n        desc:\n          'Metode forEach() mengeksekusi fungsi yang diberikan, satu kali untuk masing-masing elemen pada array.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'membuat array baru dari masing-masing elemen dengan menggunakan fungsi yang saya buat',\n        desc:\n          'Membuat sebuah array baru. Array baru ini berisi hasil-hasil pemanggilan fungsi yang diberikan pada setiap elemen di dalam array.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'membuat sebuah objek iterator',\n        desc:\n          'Mengembalikan sebuah objek Array Iterator baru yang berisi pasangan-pasangan key/value untuk masing-masing indeks di dalam array. Ada banyak kegunaan iterator beserta metode-metode yang berhubungan dengan iterator, seperti <code>values</code> dan <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'apakah terdapat suatu elemen tertentu',\n          desc:\n            'Menentukan apakah sebuah array berisi suatu elemen tertentu. Apabila ada, ia akan mengembalikan true. Sebaliknya, ia akan mengembalikan false.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'indeks pertama dari sebuah item tertentu',\n          desc:\n            'Mengembalikan indeks pertama di mana suatu elemen yang diberikan dapat ditemukan di dalam array. Ia akan mengembalikan -1 apabila elemen tersebut tidak ada di dalam array.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'indeks terakhir dari sebuah item tertentu',\n          desc:\n            'Mengembalikan indeks terakhir (terbesar) dari sebuah elemen di dalam array yang sama dengan suatu nilai yang telah ditentukan. Ia akan mengembalikan -1 apabila tidak ada elemen dengan nilai tersebut yang ditemukan.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'elemen pertama yang memenuhi sebuah kondisi',\n          desc:\n            'Mengembalikan nilai yang ditemukan pada array, apabila elemen tersebut memenuhi fungsi testing yang diberikan atau undefined apabila tidak ditemukan. Serupa dengan <code>findIndex()</code>, namun metode ini mengembalikan item.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'indeks pertama dari sebuah item yang memenuhi sebuah kondisi',\n          desc:\n            'Mengembalikan indeks dari elemen pertama pada array yang memenuhi fungsi testing yang diberikan. Apabila tidak ada elemen yang memenuhi kondisi tersebut, maka metode ini akan mengembalikan nilai -1. Serupa dengan <code>find()</code>, namun metode ini mengembalikan indeks dari item.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'sebuah nilai dengan cara mereduksi array yang dipanggil, dari awal sampai akhir',\n          desc:\n            'Mengaplikasikan sebuah fungsi terhadap sebuah akumulator dan masing-masing nilai dari array (dari kiri ke kanan) untuk mereduksinya menjadi sebuah nilai.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'sebuah nilai dengan cara mereduksi array yang dipanggil, dari akhir sampai awal',\n          desc:\n            'Mengaplikasikan sebuah fungsi terhadap sebuah akumulator dan masing-masing nilai dari array (dari kanan ke kiri) untuk mereduksinya menjadi sebuah nilai.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'satu atau lebih nilai berdasarkan kondisi yang saya buat',\n          desc:\n            'Membuat sebuah array baru, di mana array baru tersebut terdiri dari seluruh elemen pada array yang memenuhi kondisi yang diberikan.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'apakah semua item memenuhi suatu kondisi atau tidak',\n          desc:\n            'Mengembalikan true apabila semua elemen pada array memenuhi fungsi testing yang diberikan.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'apakah setidaknya sebuah item memenuhi sebuah kondisi',\n          desc:\n            'Mengembalikan true apabila setidaknya sebuah elemen pada array memenuhi fungsi testing yang diberikan.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/id/index.js\n// module id = BKTo\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'elemento(s) no array',\n        desc: 'Adiciona e/ou remove elementos do array.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'elementos no final do array',\n        desc:\n          'Adiciona um ou mais elementos no final do array e retorna o novo tamanho do array.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'elementos no início do array',\n        desc:\n          'Adiciona um ou mais elementos no início do array e retorna o novo tamanho do array.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'este array a outro(s) array(s) e/ou valor(es)',\n        desc:\n          'Retorna um novo array incluindo este array concatenado de outro(s) arrays e/ou valor(es).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'elemento(s) no array',\n        desc: 'Adiciona e/ou remove elementos do array.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'o último elemento do array',\n        desc: 'Remove o último elemento do array e retorna o elemento.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'o primeiro elemento do array',\n        desc: 'Remove o primeiro elemento do array e retorna o elemento.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'um ou mais elementos, mantendo o array original sem alterações',\n        desc:\n          'O método <code>slice()</code> retorna uma cópia rasa de parte do array em um novo objeto array. Você pode especificar apenas o índice final (deixando o índice inicial assumir o valor padrão zero), ou ambos, o índice inicial e o índice final separados por vírgula. O array original não será modificado.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'unir todos os elementos do array em uma string.',\n        desc: `Une todos elementos do array em uma string. Você pode unir todos os itens sem delimitadores, ou com algum delimitador entre os elementos, <code>elements.join(' -\n          ')</code> retorna <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'retornar uma string representando o array.',\n        desc: 'Retorna uma string representando um array e seus elementos.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'retornar uma string localizada representando o array.',\n        desc:\n          'Retorna uma string localizada representando um array e seus elementos. É muito útil para datas e moedas com características específicas do locale, recomendo consultar a documentação quando utilizar esta função.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'inverter a ordem do array',\n        desc:\n          'Inverte a ordem dos elementos do array modificando o array — o primeiro elemento se torna o último, e o último se torna o primeiro.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'ordenar os itens do array',\n        desc:\n          'Ordena os itens do array modificando o array e retorna o próprio array.',\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'retornar o comprimento do array',\n        desc: 'Retorna o número de elementos existentes no array.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc:\n          'preencher todos os elementos do array com um valor estático',\n        desc:\n          'Preenche todos os elementos do array de um índice inicial até um índice final com valores estáticos.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'copiar parte do array dentro do mesmo array.',\n        desc:\n          'Copia parte do array para outra localização dentro deste mesmo array e o retorna, sem alterar seu tamanho. Você pode especificar o índice final (deixando o índice inicial assumir o valor padrão zero), ou ambos, o índice inicial e o índice final separados por vírgula',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'executando uma função sobre cada elemento',\n        desc:\n          'O método <code>forEach()</code> executa uma função fornecida como parâmetro para cada elemento do array.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'criando um novo array a partir de cada elemento transformado via uma função',\n        desc:\n          'Cria um novo array com o resultado da chamada da função para cada elemento no array.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'criando um objeto iterator',\n        desc:\n          'Retorna um novo objeto do tipo Array Iterator que contém pares de chave/valor para cada índice do array. Há diversos usos para iterators, assim como há outros métodos análogos, como o método <code>values</code> e o método <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// o 0 é o índice,</span><br>\n        <span class=\"comment\">// o 5 é o primeiro número</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'se um dado elemento existe',\n          desc:\n            'Verifica se um array contém um certo elemento, retornando true ou false.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'o primeiro índice de um elemento',\n          desc:\n            'Retorna o primeiro índice no qual um dado elemento pode ser encontrado no array, ou retorna -1 se não existe o item.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'o último índice de um elemento',\n          desc:\n            'Retorna o último (maior) índice no qual um dado elemento pode ser encontrado no array, ou retorna -1 se não existe o item.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'o primeiro elemento que satisfaz a condição',\n          desc:\n            'Retorna o valor encontrado no array, se um elemento no array satisfaz o teste da função fornecida como parâmetro, ou retorna undefined se não encontrado. Similar ao método <code>findIndex()</code>, porém esta função retorna o item ao invés do índice.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'o primeiro índice de um elemento que satisfaz a condição',\n          desc:\n            'Retorna o índice do primeiro elemento no array que satisfaz o teste da função fornecida como parâmetro. Senão, o valor -1 é retornado. Similar ao método <code>find()</code>, porém esta função retorna o índice ao invés do item.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'um valor através da redução do array, início ao fim',\n          desc:\n            'Aplica uma função sobre um acumulador e cada elemento do array (da esquerda para direita) até reduzir a um único valor.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'um valor através da redução do array, fim ao início',\n          desc:\n            'Aplica uma função sobre um acumulador e cada elemento do array (da direta para esquerda) até reduzir a um único valor.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'um valor baseado numa condição que eu criei',\n          desc:\n            'Cria um novo array com todos os elementos do array que satisfazem o teste da função fornecida como parâmetro.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'se todos elementos satisfazem uma condição',\n          desc:\n            'Retorna true se todos elementos no array satisfazem o teste da função fornecida como parâmetro.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'se pelo menos algum elemento satisfaz uma condição',\n          desc:\n            'Retorna true se pelo menos um elemento no array satisfaz o teste da função fornecida como parâmetro.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/pt/index.js\n// module id = BYe3\n// module chunks = 1","module.exports = {\"short\":\"ar\",\"long\":\"Arabic\",\"createdBy\":\"salahaa1\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ar/meta.json\n// module id = C3Ql\n// module chunks = 1","var map = {\n\t\"./ar\": \"0iGN\",\n\t\"./ar/\": \"0iGN\",\n\t\"./ar/index\": \"0iGN\",\n\t\"./ar/index.js\": \"0iGN\",\n\t\"./ar/meta\": \"C3Ql\",\n\t\"./ar/meta.json\": \"C3Ql\",\n\t\"./bg\": \"WbDD\",\n\t\"./bg/\": \"WbDD\",\n\t\"./bg/index\": \"WbDD\",\n\t\"./bg/index.js\": \"WbDD\",\n\t\"./bg/meta\": \"WYaq\",\n\t\"./bg/meta.json\": \"WYaq\",\n\t\"./cz\": \"vsdj\",\n\t\"./cz/\": \"vsdj\",\n\t\"./cz/index\": \"vsdj\",\n\t\"./cz/index.js\": \"vsdj\",\n\t\"./cz/meta\": \"Kx46\",\n\t\"./cz/meta.json\": \"Kx46\",\n\t\"./de\": \"I9nf\",\n\t\"./de/\": \"I9nf\",\n\t\"./de/index\": \"I9nf\",\n\t\"./de/index.js\": \"I9nf\",\n\t\"./de/meta\": \"dLso\",\n\t\"./de/meta.json\": \"dLso\",\n\t\"./el\": \"GY6O\",\n\t\"./el/\": \"GY6O\",\n\t\"./el/index\": \"GY6O\",\n\t\"./el/index.js\": \"GY6O\",\n\t\"./el/meta\": \"0wYN\",\n\t\"./el/meta.json\": \"0wYN\",\n\t\"./en\": \"cACW\",\n\t\"./en/\": \"cACW\",\n\t\"./en/index\": \"cACW\",\n\t\"./en/index.js\": \"cACW\",\n\t\"./en/meta\": \"mJJP\",\n\t\"./en/meta.json\": \"mJJP\",\n\t\"./es\": \"lx7K\",\n\t\"./es/\": \"lx7K\",\n\t\"./es/index\": \"lx7K\",\n\t\"./es/index.js\": \"lx7K\",\n\t\"./es/meta\": \"/TCW\",\n\t\"./es/meta.json\": \"/TCW\",\n\t\"./fr\": \"YsDL\",\n\t\"./fr/\": \"YsDL\",\n\t\"./fr/index\": \"YsDL\",\n\t\"./fr/index.js\": \"YsDL\",\n\t\"./fr/meta\": \"W+34\",\n\t\"./fr/meta.json\": \"W+34\",\n\t\"./id\": \"BKTo\",\n\t\"./id/\": \"BKTo\",\n\t\"./id/index\": \"BKTo\",\n\t\"./id/index.js\": \"BKTo\",\n\t\"./id/meta\": \"GRBw\",\n\t\"./id/meta.json\": \"GRBw\",\n\t\"./index\": \"vdRI\",\n\t\"./index.js\": \"vdRI\",\n\t\"./it\": \"mfqg\",\n\t\"./it/\": \"mfqg\",\n\t\"./it/index\": \"mfqg\",\n\t\"./it/index.js\": \"mfqg\",\n\t\"./it/meta\": \"htUn\",\n\t\"./it/meta.json\": \"htUn\",\n\t\"./ja\": \"dByq\",\n\t\"./ja/\": \"dByq\",\n\t\"./ja/index\": \"dByq\",\n\t\"./ja/index.js\": \"dByq\",\n\t\"./ja/meta\": \"Jrss\",\n\t\"./ja/meta.json\": \"Jrss\",\n\t\"./nl\": \"oBQB\",\n\t\"./nl/\": \"oBQB\",\n\t\"./nl/index\": \"oBQB\",\n\t\"./nl/index.js\": \"oBQB\",\n\t\"./nl/meta\": \"/7gC\",\n\t\"./nl/meta.json\": \"/7gC\",\n\t\"./pt\": \"BYe3\",\n\t\"./pt/\": \"BYe3\",\n\t\"./pt/index\": \"BYe3\",\n\t\"./pt/index.js\": \"BYe3\",\n\t\"./pt/meta\": \"7Duw\",\n\t\"./pt/meta.json\": \"7Duw\",\n\t\"./ru\": \"tprR\",\n\t\"./ru/\": \"tprR\",\n\t\"./ru/index\": \"tprR\",\n\t\"./ru/index.js\": \"tprR\",\n\t\"./ru/meta\": \"7Zqp\",\n\t\"./ru/meta.json\": \"7Zqp\",\n\t\"./sr\": \"VITF\",\n\t\"./sr/\": \"VITF\",\n\t\"./sr/index\": \"VITF\",\n\t\"./sr/index.js\": \"VITF\",\n\t\"./sr/meta\": \"KNmn\",\n\t\"./sr/meta.json\": \"KNmn\",\n\t\"./tr\": \"Uefv\",\n\t\"./tr/\": \"Uefv\",\n\t\"./tr/index\": \"Uefv\",\n\t\"./tr/index.js\": \"Uefv\",\n\t\"./tr/meta\": \"ZBXR\",\n\t\"./tr/meta.json\": \"ZBXR\",\n\t\"./ua\": \"uoDV\",\n\t\"./ua/\": \"uoDV\",\n\t\"./ua/index\": \"uoDV\",\n\t\"./ua/index.js\": \"uoDV\",\n\t\"./ua/meta\": \"NVEa\",\n\t\"./ua/meta.json\": \"NVEa\",\n\t\"./zh_cn\": \"059H\",\n\t\"./zh_cn/\": \"059H\",\n\t\"./zh_cn/index\": \"059H\",\n\t\"./zh_cn/index.js\": \"059H\",\n\t\"./zh_cn/meta\": \"EQ+A\",\n\t\"./zh_cn/meta.json\": \"EQ+A\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"DERJ\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store [a-z]{2}\n// module id = DERJ\n// module chunks = 1","module.exports = {\"short\":\"zh_cn\",\"long\":\"Chinese (Simplified)\",\"createdBy\":\"proYang and g-plane\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/zh_cn/meta.json\n// module id = EQ+A\n// module chunks = 1","module.exports = {\"short\":\"id\",\"long\":\"Indonesian\",\"createdBy\":\"galuhsahid\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/id/meta.json\n// module id = GRBw\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'στοιχείο/α σε έναν πίνακα',\n        desc: 'Προσθέτει ή αφαιρεί στοιχεία σε έναν πίνακα.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'στοιχεία στο τέλος του πίνακα',\n        desc:\n          'Προσθέτει ένα ή περισσότερα στοιχεία στο τέλος του πίνακα και επιστρέφει το νέο μήκος του.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'στοιχεία στην αρχή του πίνακα',\n        desc:\n          'Προσθέτει ένα ή περισσότερα στοιχεία στην αρχή του πίνακα και επιστρέφει το νέο μήκος του.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'αυτόν τον πίνακα σε άλλον(ους) πίνακα(ες) ή/και τιμή(ες)',\n        desc:\n          'Επιστρέφει έναν νέο πίνακα που αποτελείται από τον τρέχοντα και άλλον(ους) πίνακα(ες) ή/και τιμή(ες).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'στοιχείο/α απο τον πίνακα',\n        desc: 'Προσθέτει ή αφερεί στοιχεία απο τον πίνακα.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'το τελευταίο στοιχείο του πίνακα',\n        desc:\n          'Αφαιρεί και επιστρέφει το τελευταίο στοιχείο του πίνακα.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'το πρώτο στοιχείο του πίνακα',\n        desc:\n          'Αφαιρεί και επιστρέφει το πρώτο στοιχείο του πίνακα.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'ένα ή παραπάνω στοιχεία, αφήνοντας τον αρχικό πίνακα αμετάβλητο',\n        desc:\n          'Η μεθοδος <code>slice()</code> επιστέφει ένα \"ρηχό\" αντίγραφο τμήματος του αρχικού πίνακα, σαν έναν νέο. Μπορείτε να θέσετε την αρχή μόνο (οπότε το τέλος θα είναι το μήκος του πίνακα), είτε την αρχή και το τέλος, χωρισμένα με κόμμα.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'ενώσω όλα τα στοιχεία του πίνακα σε ένα αλφαριθμητικό',\n        desc: `Ενώνει όλα τα στοιχεία του πίνακα σε ένα αλφαριθμητικό. Μπορείτε να θέσετε και κάποιο συνδετικό ανάμεσα, <code>elements.join(' -\n          ')</code> επιστρέφει <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'επιστρέψω τον πίνακα σαν ένα αλφαριθμητικό.',\n        desc: 'Επιστρέφει τον πίνακα και τα στοιχεία του σαν ένα αλφαριθμητικό.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'επιστρέψω τον πίνακα σαν ένα μεταφρασμένο αλφαριθμητικό.',\n        desc:\n          'Επιστρέφει ένα μεταφρασμένο αλφαρηθμητικό που αναπαριστά τον πίνακα και τις τιμές του. Αυτή η μέθοδος είναι χρήσιμη για ημερομηνίες και νομίσματα, αλλά επειδή η υλοποίησή της ποικίλει, καλύτερα να συμβουλεύεστε τα κείμενα όταν την χρησιμοποιείται.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'αντιστρέψω τον πίνακα',\n        desc:\n          'Αντιστέφει την σειρά των στοιχέιων του πίνακα — το πρώτο γίνεται τελευταίο και αντίστροφα.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'ταξινομεί τα στοιχέια του πίνακα',\n        desc: `Ταξινομεί τα στοιχεία μέσα στον πίνακα και τον επιστρέφει.<br>\n        <br>\n        <strong>Σημαντική Σημείωση:</strong> Αν δεν παρέχετε την μέθοδο compareFunction, τα στοιχεία μετατρέπονται σε Unicode αλφαριθμητικά και ταξινομούνται. Για παράδειγμα, το \"Banana\" θα προηγείται του \"cherry\". Σε αριθμητική σειρά, το 9 προηγείται του 80, αλλά επειδή τα νούμερα μετατρέπονται σε αλφαριθμητικά, το \"80\" θα προηγείται του \"9\" σε σειρά Unicode. Ανατρέξτε στα κείμενα για περισσότερες διευκρινύσεις.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'επιστρέψω το μέγεθος του πίνακα',\n        desc: 'Επιτρέφει το πλήθος των στοιχείων του πίνακα.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'αναθέσω μια στατική τιμή σε όλα τα στοιχεία του πίνακα',\n        desc:\n          'Γεμίζει όλα τα στοιχεία του πίνακα, απο μία αρχική θέση έως μία τελική θέση, αναθέτοντας μία συγκεκριμένη στατική τιμή.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'αντιγράψω μέρος του πίνακα σε άλλη θέση.',\n        desc:\n          'Αντιγράφει μέρος του πίνακα σε άλλη θέση, χωρίς να μεταβάλει το μέγεθός του. Μπορείτε να θέσετε είτε την τελική θέση στον πίνακα (οπότε αρχική ειναι η μηδενική), είτε την αρχική και την τελική χωρισμένες με κόμμα.', \n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'εκτελέσω μια μέθοδο για κάθε στοιχείο του πίνακα',\n        desc:\n          'Η μέθοδος forEach(), εκτελεί την μέθοδο που παρέχετε, μια φορά για κάθε στοιχείο στον πίνακα.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'δημιουργήσω ένα νέο πίνακα, για κάθε στοιχείο του πίνακα, εφαρμόζοντας την συνάρτηση που θέλω',\n        desc:\n          'Εφαρμόζοντας την δοθείσα συνάρτηση σε κάθε στοιχείο του πίνακα, δημιουργείται ένας νέος.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'δημιουργήσω ένα iterator αντικείμενο (επανάληψης)',\n        desc:\n          'Επιστρέφει ένα αντικείμενο iterator (επανάληψης), το οποίο επιστρέφει τα ζεύγη κλειδιού/τιμής για κάθε θέση του πίνακα. Οι iterators έχουν πολλές χρήσεις, όπως και άλλες μεθόδοι που μπορούν να χρησιμοποιηθούν μαζί, όπως τα <code>values</code> και τα <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'αν περιέχει ένα συγκεκριμένο στοιχείο',\n          desc:\n            'Επιστρέφει αληθής (true) ή ψευδής (false), αν ο πίνακας περιέχει την συγκεκριμένη τιμή.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'την πρώτη θέση στην οποία υπάρχει ένα συγκεκριμένο στοιχείο',\n          desc:\n            'Επιστρέφει την πρώτη θέση στην οποία βρίσκεται ένα συγκριμένο στοιχείο. Αν το στοιχείο δεν βρίσκεται στον πίνακα, τότε επιστρέφει -1.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'την τελευταία θέση στην οποία υπάρχει ένα συγκεκριμένο στοιχείο',\n          desc:\n            'Επιστρέφει την τελευταία θέση στην οποία βρίσκεται ένα συγκριμένο στοιχείο. Αν το στοιχείο δεν βρίσκεται στον πίνακα, τότε επιστρέφει -1.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'το πρώτο στοιχείο που ικανοποιεί μια συνθήκη',\n          desc:\n            'Επιστρέφει την τιμή που βρίσκει στον πίνακα, εφόσον ικανοποιεί την συνάρτηση που έχετε δώσει. Διαφορετικά, επιστρέφει undefined. Παρόμοια με το <code>findIndex()</code>, απλά επιστρέφει την τιμή αντί για την θέση.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'την πρώτη θέση στην οποία η τιμή του στοιχείου ικανοποιεί την συνθήκη',\n          desc:\n            'Επιστρέφει την θέση του πρώτου στοιχείου στον πίνακα, το οποίο ικανοποιεί την δοθείσα συνάρτηση. Διαφορετικά, επιστρέφει -1. Παρόμοια με την <code>find()</code>, αλλά επιστρέφει την θέση αντί για την τιμή.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'μια τιμή συρρικνώνοντας τα στοιχεία του πίνακα, απο την αρχή ως το τέλος',\n          desc:\n            'Εφαρμόζει μια συνάρτηση πάνω σε ένα συσσωρευτή (accumulator) και σε κάθε τιμή του πίνακα (από τα αριστερά προς τα δεξιά) μέχρι να μείνει μόνο μια τιμή.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'μια τιμή συρρικνώνοντας τα στοιχεία του πίνακα, απο το τέλος ως την αρχή',\n          desc:\n            'Εφαρμόζει μια συνάρτηση πάνω σε ένα συσσωρευτή (accumulator) και σε κάθε τιμή του πίνακα (από τα δεξιά προς τα αριστερά) μέχρι να μείνει μόνο μια τιμή.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'τιμές με βάση μια συνθήκη που θέτω',\n          desc:\n            'Φτιάχνει έναν καινούριο πίνακα, από τα στοιχεία του πίνακα τα οποία ικανονοποιούν την δοθείσα συνάρτηση φιλτραρίσματος.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'εάν κάθε στοιχείο ικανοποιεί μια συνθήκη',\n          desc:\n            'Επιστρέφει αληθής (true) εάν κάθε στοιχείο στον πίνακα ικανοποιεί την δοθείσα συνάρτηση.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'εάν τουλάχιστον ένα στοιχείο ικανοποιεί μια συνθήκη',\n          desc:\n            'Επιστρέφει αληθής (true) εάν τουλάχιστον ένα στοιχείο στον πίνακα ικανοποιεί την δοθείσα συνάρτηση.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/el/index.js\n// module id = GY6O\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'Elemente in einen Array einfügen',\n        desc: 'Fügt Elemente zu einem Array hinzu oder entfernt welche.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'Elemente an das Ende eines Arrays anhängen',\n        desc:\n          'Hängt ein oder mehrere Elemente an einen Array an und gibt die neue Länge des Arrays zurück.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'Elemente an den Anfang eines Arrays hinzufügen',\n        desc:\n          'Fügt ein oder mehrere Elemente an den Anfang eines Arrays an und gibt die neue Länge des Arrays zurück.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'diesen Array zu anderen Arrays und/oder Werten hinzufügen',\n        desc:\n          'Gibt einen neuen Array bestehend aus diesem Array zusammen mit anderen Array(s) und/oder Werten zurück.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'Elemente aus einem Array entfernen',\n        desc: 'Fügt Elemente einem Array hinzu und/oder entfernt welche.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'das letzte Element eines Arrays entfernen',\n        desc: 'Entfernt das letzte Element eines Arrays und gibt es zurück.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'das erste Element eines Arrays entfernen',\n        desc: 'Entfernt das erste Element eines Arrays und gibt es zurück.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        // fehlt noch\n        shortDesc:\n          'mindestens ein Element, ohne den eigentlichen Array zu verändern, entfernen',\n        desc:\n          'Die <code>slice()</code>-Methode schreibt eine flache Kopie eines Teils des Arrays in ein neues Array-Objekt. Man kann entweder nur den Index für das letzte Elemente (dann wird der Index für das erste Element auf 0 gesetzt) oder sowohl den Index für das erste und das letzte Element kommagetrennt angeben. Der Original-Array wird nicht verändert.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'alle Elemente eines Arrays in einen String zusammenführen.',\n        desc: `Führt alle Elemente eines Arrays in einem String zusammen. Man kann die Elemente entweder mit oder ohne Trennzeichen zusammenführen. <code>elements.join(' -\n          ')</code> gibt <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'einen String, der den Array repräsentiert, zurückgegeben.',\n        desc:\n          'Gibt einen String, der den Array und alle darin enthaltenen Elemente beinhaltet, zurück.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc:\n          'einen an die Sprache angepassten String, der den Array repräsentiert, zurückgeben.',\n        desc:\n          'Diese Methode ist ein bisschen komisch. Sie gibt einen an die Sprache angepassten String, der den Array und alle seine Elemente beinhaltet, zurück. Dies ist sehr nützlich für Datumsangaben und Währungen, hat aber einige seltsame Verhaltensweisen, so dass du am besten die genaue Dokumentation durchlesen solltest.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'die Reihenfolge eines Arrays umkehren',\n        desc:\n          'Kehrt die Reihenfolge der Elemente in einem Array um, das erste wird zum letzten Element, das letzte zum ersten.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'die Elemente in einem Array sortieren',\n        desc:\n          'Sortiert die Elemente eines Arrays in aufsteigender Reihenfolge.',\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'die Länge des Arrays herausfinden',\n        desc: 'Gibt die Zahl aller Elemente in einem Array zurück.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc:\n          'allen Elementen des Arrays einen bestimmten Wert zuweisen',\n        desc:\n          'Weist alle Elementen in einem Array vom Start- bis zum Endindex einen bestimmten Wert zu.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc:\n          'einen Folge von Elementen des Arrays innerhalb des Arrays kopieren',\n        desc:\n          'Kopiert eine Reihe von Elementen des Arrays innerhalb des Arrays. Du kannst entweder nur das letzte Element (dann wird der Startindex auf 0 gesetzt) oder sowohl das erste als auch das letzte kommagetrennt festlegen.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc:\n          'eine selbstdefinierte Funktion auf jedes Elemente des Arrays anwenden',\n        desc:\n          'Die <code>forEach()</code>-Methode wendet eine gegebene Funktion auf jedes Element im Array an.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'einen neuen Array basierend auf einer auf alle Elemente angewendeten Funktion erstellen',\n        desc:\n          'Erstellt einen neuen Array, dessen Elemente auf dem gegebenem Array, auf die eine gegebene Funktion angewendet wurde, basieren.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'ein Iterator-Objekt erstellen',\n        desc:\n          'Gibt ein Iterator-Objekt zurück, das zu jedem Index den Wert des Elements beinhaltet. Es gibt eine Vielzahl an Anwendungen für Iteratoren und andere Methoden, die in Verbindung mit Iteratoren genutzt werden, wie <code>key</code> oder <code>value</code>.',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'herausfinden, ob ein bestimmtes Element im Array vorkommt',\n          desc:\n            'Existiert ein bestimmtes Element im Array, wird true, ansonsten false, zurückgegeben.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'herausfinden, was der erste Index eines Elements ist',\n          desc:\n            'Gibt den ersten Index, an dem das Element gefunden werden kann, zurück, oder -1, falls es nicht vorkommt.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'den letzten Index eines Elements finden',\n          desc:\n            'Gibt den letzten (größten) Index zurück, an dem ein Element gefunden werden kann, oder -1, falls es nicht im Array vorkommt.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'das erste Element, das eine Bedingung erfüllt, finden',\n          desc:\n            'Gibt das erste gefundene Element aus dem Array zurück, das die gegebene Bedingung erfüllt, wenn mindestens ein Element die gegebene Bedingung erfüllt, sonst wird undefined zurückgegeben. Ähnlich zu <code>findIndex()</code>, aber <code>find()</code> gibt das Element und nicht den Index zurück.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc:\n            'den ersten Index eines Elements, das eine Bedingung erfüllt, finden',\n          desc:\n            'Gibt den Index des ersten Elements im Array, das die gegebene Bedingung erfüllt, zurück. Erfüllt kein Element die Bedingung, wird -1 zurückgegeben. Ähnlich zu <code>find()</code>, aber <code>findIndex()</code> gibt den Index statt des Elements zurück.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc:\n            'den Array auf einen einzigen Wert reduzieren, von links nach rechts',\n          desc:\n            'Reduziert das Array auf einen einzigen Wert, indem es jeweils zwei Elemente (von links nach rechts) durch eine angegebene Funktion reduziert.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc:\n            'den Array auf einen einzigen Wert reduzieren, von rechts nach links',\n          desc:\n            'Wendet eine Funktion gegen einen Akkumulator auf jeden Wert des Arrays (von rechts nach links) an und reduziert es um einen einzelnen Wert.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc:\n            'Werte basierend auf einer selbsterstellten Bedingung finden',\n          desc:\n            'Erstellt einen neuen Array mit allen Elementen des Strings, die eine gegebene Bedingung erfüllen.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc:\n            'herausfinden, ob alle Elemente des Arrays eine Bedingung erfüllen',\n          desc:\n            'Gibt true zurück, wenn alle Elemente des Arrays eine gegebene Bedingung erfüllen.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc:\n            'herausfinden, ob mindestens ein Element im Array eine Bedingung erfüllt',\n          desc:\n            'Gibt true zurück, wenn zumindest ein Element des Arrays eine gegebene Bedingung erfüllt.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/de/index.js\n// module id = I9nf\n// module chunks = 1","module.exports = {\"short\":\"ja\",\"long\":\"Japanese\",\"createdBy\":\"meih\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ja/meta.json\n// module id = Jrss\n// module chunks = 1","module.exports = {\"short\":\"sr\",\"long\":\"Serbian\",\"createdBy\":\"bdimitrovski\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/sr/meta.json\n// module id = KNmn\n// module chunks = 1","module.exports = {\"short\":\"cz\",\"long\":\"Czech\",\"createdBy\":\"xgebi\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/cz/meta.json\n// module id = Kx46\n// module chunks = 1","<template>\n  <div>\n    <h2><slot name=\"title\" /></h2>\n    <p class=\"desc\"><slot name=\"desc\" /></p>\n    <p class=\"link\"><em><a :href=\"`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/${urlPath}`\" target=\"_blank\">see the docs &#8594;</a></em></p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'method-base',\n  props: {\n    urlPath: {\n      type: String,\n      default: 'length'\n    }\n  }\n}\n</script>\n\n\n<style scoped>\ndiv {\n  border: 1px solid #ccc;\n  margin-top: 30px;\n  padding: 0 20px;\n  background: white;\n  border-radius: 5px;\n}\n\nh2 {\n  color: #ce371a;\n}\n\np.desc {\n  margin-bottom: 0;\n}\n\np.link {\n  margin-top: 5px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/methods/MethodBase.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._t(\"title\")],2),_vm._v(\" \"),_c('p',{staticClass:\"desc\"},[_vm._t(\"desc\")],2),_vm._v(\" \"),_c('p',{staticClass:\"link\"},[_c('em',[_c('a',{attrs:{\"href\":(\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/\" + _vm.urlPath),\"target\":\"_blank\"}},[_vm._v(\"see the docs →\")])])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0dd77848\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/methods/MethodBase.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0dd77848\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./MethodBase.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./MethodBase.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./MethodBase.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0dd77848\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./MethodBase.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0dd77848\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/methods/MethodBase.vue\n// module id = null\n// module chunks = ","<template>\n  <div>\n    <p>\n      <label for=\"methodoptions\">{{$t('methodOptions', 'I need to')}} {{ methodType && $t(`methodTypes.${methodType}`) }}</label>\n      <select id=\"methodoptions\" name=\"select\" v-model=\"selected\">\n        <option value=\"\" disabled selected>...</option>\n        <option v-for=\"option in options\" :key=\"option.desc\" :value=\"option\">\n          {{ option.shortDesc }}\n        </option>\n      </select>\n    </p>\n    <method-base v-show=\"isSelected\" :urlPath=\"selected.name\">\n      <span v-if=\"selected.name === 'length'\" slot=\"title\">Array.{{selected.name}}</span>\n      <span v-else slot=\"title\">Array.{{selected.name}}()</span>\n      <span slot=\"desc\" v-html=\"selected.desc\"></span>\n    </method-base>\n  </div>\n</template>\n\n<script>\nimport MethodBase from './MethodBase.vue'\nimport {mapState} from 'vuex'\n\nexport default {\n  components: {\n    MethodBase\n  },\n  props: {\n    methodType: {\n      type: String,\n      required: false\n    },\n    options: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      selected: ''\n    }\n  },\n  computed: {\n    isSelected() {\n      return this.$store.state.selectedMethod\n    }\n  },\n  watch: {\n    selected() {\n      this.$store.commit('selectionMethod', this.selected)\n    }\n  }\n}\n</script>\n\n<style scoped>\ncode {\n  background: #eee;\n  padding: 3px 6px;\n  font-size: 16px;\n  border-radius: 5px;\n  color: #666;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/methods/MethodChoice.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('p',[_c('label',{attrs:{\"for\":\"methodoptions\"}},[_vm._v(_vm._s(_vm.$t('methodOptions', 'I need to'))+\" \"+_vm._s(_vm.methodType && _vm.$t((\"methodTypes.\" + _vm.methodType))))]),_vm._v(\" \"),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selected),expression:\"selected\"}],attrs:{\"id\":\"methodoptions\",\"name\":\"select\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selected=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{\"value\":\"\",\"disabled\":\"\",\"selected\":\"\"}},[_vm._v(\"...\")]),_vm._v(\" \"),_vm._l((_vm.options),function(option){return _c('option',{key:option.desc,domProps:{\"value\":option}},[_vm._v(\"\\n        \"+_vm._s(option.shortDesc)+\"\\n      \")])})],2)]),_vm._v(\" \"),_c('method-base',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isSelected),expression:\"isSelected\"}],attrs:{\"urlPath\":_vm.selected.name}},[(_vm.selected.name === 'length')?_c('span',{attrs:{\"slot\":\"title\"},slot:\"title\"},[_vm._v(\"Array.\"+_vm._s(_vm.selected.name))]):_c('span',{attrs:{\"slot\":\"title\"},slot:\"title\"},[_vm._v(\"Array.\"+_vm._s(_vm.selected.name)+\"()\")]),_vm._v(\" \"),_c('span',{attrs:{\"slot\":\"desc\"},domProps:{\"innerHTML\":_vm._s(_vm.selected.desc)},slot:\"desc\"})])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-c134480e\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/methods/MethodChoice.vue\n// module id = null\n// module chunks = ","<template>\n  <div>\n    <label for=\"firstmethod\">{{$t('firstMethod', 'I have an array, I would like to')}}</label>\n    <select id=\"firstmethod\" name=\"select\" v-model=\"selectedFilter\">\n      <option value=\"\" disabled selected>...</option>\n      <option v-for=\"option in options\" :key=\"option.name\" :value=\"option\">\n        {{ option }}\n      </option>\n    </select>\n    <div v-if=\"selectedFilter === options[0]\">\n      <method-choice :options=\"adding\" methodType=\"add\"/>\n    </div>\n    <div v-else-if=\"selectedFilter === options[1]\">\n      <method-choice :options=\"removing\" methodType=\"remove\"/>\n    </div>\n    <div v-else-if=\"selectedFilter === options[3]\">\n      <method-choice :options=\"iterate\" methodType=\"iterate by\"/>\n    </div>\n    <div v-else-if=\"selectedFilter === options[2]\">\n\n      <p>\n        <label for=\"findmethod\">{{$t('findMethod', \"I'm trying to find\")}}</label>\n        <select id=\"findMethod\" name=\"select\" v-model=\"selectedFind\">\n          <option value=\"\" disabled selected>...</option>\n          <option value=\"single\">{{$t('singleItem', 'one item')}}</option>\n          <option value=\"many\">{{$t('manyItems', 'one or many items')}}</option>\n        </select>\n      </p>\n\n      <div v-if=\"selectedFind === 'single'\">\n        <method-choice :options=\"find.single\" methodType=\"find\"/>\n      </div>\n\n      <div v-else-if=\"selectedFind === 'many'\">\n        <method-choice :options=\"find.many\" methodType=\"find\"/>\n      </div>\n\n    </div>\n    <div v-else-if=\"selectedFilter === options[5]\">\n      <method-choice :options=\"ordering\"/>\n    </div>\n    <div v-else-if=\"selectedFilter === options[4]\">\n      <method-choice :options=\"string\"/>\n    </div>\n    <div v-else-if=\"selectedFilter === options[6]\">\n      <method-choice :options=\"other\"/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { store } from '../../store/index'\nimport { mapState } from 'vuex'\nimport MethodChoice from './methods/MethodChoice.vue'\n\nfunction mapLocalizedState(props) {\n  let res = {}\n  props.forEach(\n    prop =>\n      (res[prop] = state => {\n        const { curLanguage } = state.$store.state\n        return state.$store.state[curLanguage][prop]\n      })\n  )\n  return res\n}\n\nexport default {\n  components: {\n    MethodChoice\n  },\n  data() {\n    return {\n      selectedFilter: '',\n      selectedFind: ''\n    }\n  },\n  computed: {\n    ...mapLocalizedState([\n      'adding', //: state => localizedState(state, 'adding'),\n      'removing',\n      'iterate',\n      'string',\n      'ordering',\n      'other',\n      'find'\n    ]),\n    options: function() {\n      return this.$t('primaryOptions')\n    }\n  },\n  // },\n  watch: {\n    selectedFilter() {\n      this.$store.commit('resetSelection')\n    },\n    selectedFind() {\n      this.$store.commit('resetSelection')\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/AppMethodPrimary.vue","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-c134480e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./MethodChoice.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./MethodChoice.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./MethodChoice.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-c134480e\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./MethodChoice.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-c134480e\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/methods/MethodChoice.vue\n// module id = null\n// module chunks = ","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('label',{attrs:{\"for\":\"firstmethod\"}},[_vm._v(_vm._s(_vm.$t('firstMethod', 'I have an array, I would like to')))]),_vm._v(\" \"),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedFilter),expression:\"selectedFilter\"}],attrs:{\"id\":\"firstmethod\",\"name\":\"select\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selectedFilter=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{\"value\":\"\",\"disabled\":\"\",\"selected\":\"\"}},[_vm._v(\"...\")]),_vm._v(\" \"),_vm._l((_vm.options),function(option){return _c('option',{key:option.name,domProps:{\"value\":option}},[_vm._v(\"\\n      \"+_vm._s(option)+\"\\n    \")])})],2),_vm._v(\" \"),(_vm.selectedFilter === _vm.options[0])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.adding,\"methodType\":\"add\"}})],1):(_vm.selectedFilter === _vm.options[1])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.removing,\"methodType\":\"remove\"}})],1):(_vm.selectedFilter === _vm.options[3])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.iterate,\"methodType\":\"iterate by\"}})],1):(_vm.selectedFilter === _vm.options[2])?_c('div',[_c('p',[_c('label',{attrs:{\"for\":\"findmethod\"}},[_vm._v(_vm._s(_vm.$t('findMethod', \"I'm trying to find\")))]),_vm._v(\" \"),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedFind),expression:\"selectedFind\"}],attrs:{\"id\":\"findMethod\",\"name\":\"select\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selectedFind=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{\"value\":\"\",\"disabled\":\"\",\"selected\":\"\"}},[_vm._v(\"...\")]),_vm._v(\" \"),_c('option',{attrs:{\"value\":\"single\"}},[_vm._v(_vm._s(_vm.$t('singleItem', 'one item')))]),_vm._v(\" \"),_c('option',{attrs:{\"value\":\"many\"}},[_vm._v(_vm._s(_vm.$t('manyItems', 'one or many items')))])])]),_vm._v(\" \"),(_vm.selectedFind === 'single')?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.find.single,\"methodType\":\"find\"}})],1):(_vm.selectedFind === 'many')?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.find.many,\"methodType\":\"find\"}})],1):_vm._e()]):(_vm.selectedFilter === _vm.options[5])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.ordering}})],1):(_vm.selectedFilter === _vm.options[4])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.string}})],1):(_vm.selectedFilter === _vm.options[6])?_c('div',[_c('method-choice',{attrs:{\"options\":_vm.other}})],1):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6974d5e0\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/AppMethodPrimary.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6974d5e0\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./AppMethodPrimary.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./AppMethodPrimary.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./AppMethodPrimary.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6974d5e0\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./AppMethodPrimary.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6974d5e0\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/AppMethodPrimary.vue\n// module id = null\n// module chunks = ","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('a',{staticClass:\"github-corner\",attrs:{\"href\":\"https://github.com/sdras/array-explorer\",\"aria-label\":\"View source on Github\"}},[_c('svg',{staticStyle:{\"fill\":\"#FD6C6C\",\"color\":\"#fff\",\"position\":\"absolute\",\"top\":\"0\",\"border\":\"0\",\"right\":\"0\"},attrs:{\"width\":\"80\",\"height\":\"80\",\"viewBox\":\"0 0 250 250\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"d\":\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"}}),_c('path',{staticClass:\"octo-arm\",staticStyle:{\"transform-origin\":\"130px 106px\"},attrs:{\"d\":\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\",\"fill\":\"currentColor\"}}),_c('path',{staticClass:\"octo-body\",attrs:{\"d\":\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\",\"fill\":\"currentColor\"}})])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ba6985fe\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/AppGithubCorner.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ba6985fe\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./AppGithubCorner.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nvar __vue_script__ = null\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ba6985fe\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./AppGithubCorner.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ba6985fe\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/AppGithubCorner.vue\n// module id = null\n// module chunks = ","<template>\n  <div class=\"localization-dropdown\">\n    <a href=\"https://sdras.github.io/object-explorer/\"><em>Object Explorer</em></a>\n    <br>\n    Language: \n    <select v-model=\"selectedLanguage\">\n      <option v-for=\"(val, key) in languages\" :value=\"key\">{{val.long}}</option>\n    </select>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      selectedLanguage: this.$store.state.curLanguage,\n      languages: this.$store.state.languages\n    }\n  },\n  watch: {\n    selectedLanguage(newLang) {\n      console.log('new lang', newLang)\n      this.$store.commit('changeLanguage', newLang)\n      this.$store.commit('resetSelection')\n    }\n  }\n}\n</script>\n\n<style scoped>\nselect {\n  margin-top: 8px;\n}\n\n.localization-dropdown {\n  position: absolute;\n  right: 8%;\n  top: 35px;\n  text-align: right;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/LocaleSwitcher.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"localization-dropdown\"},[_vm._m(0),_vm._v(\" \"),_c('br'),_vm._v(\"\\n  Language: \\n  \"),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedLanguage),expression:\"selectedLanguage\"}],on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selectedLanguage=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},_vm._l((_vm.languages),function(val,key){return _c('option',{domProps:{\"value\":key}},[_vm._v(_vm._s(val.long))])}),0)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('a',{attrs:{\"href\":\"https://sdras.github.io/object-explorer/\"}},[_c('em',[_vm._v(\"Object Explorer\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-83802682\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/LocaleSwitcher.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-83802682\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./LocaleSwitcher.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LocaleSwitcher.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LocaleSwitcher.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-83802682\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./LocaleSwitcher.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-83802682\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/LocaleSwitcher.vue\n// module id = null\n// module chunks = ","<template>\n  <aside>\n    <div class=\"usage-code usage1\">\n      <p>\n        <span>let arr = [5, 1, 8];</span><br>\n        <span v-if=\"selectedUsage\"\n          class=\"exampleoutput\"\n          ref=\"ex\"\n          v-html=\"selectedUsage.example\">\n        </span>\n      </p>\n    </div>\n    <div v-if=\"selectedUsage\" class=\"usage2\">\n      <h3 style=\"margin-top: 50px\">Output</h3>\n      <div class=\"usage-code\">\n        <p>\n          <span\n            class=\"exampleoutput2\"\n            ref=\"ex2\"\n            v-html=\"selectedUsage.output\">\n          </span>\n        </p>\n      </div><!--usage-code-->\n    </div>\n  </aside>\n</template>\n\n<script>\nimport { TweenLite, TimelineMax, Back, Power4 } from 'gsap'\n\nexport default {\n  methods: {\n    typeOut() {\n      let split = new SplitText(this.$refs.ex, { type: 'chars' }),\n        split2 = new SplitText(this.$refs.ex2, { type: 'chars' }),\n        tl = new TimelineMax()\n\n      tl.add('start')\n      tl.to(this.$refs.ex, 0.1, {\n        opacity: 1\n      })\n      tl.staggerFromTo(\n        split.chars,\n        0.1,\n        {\n          opacity: 0,\n          scale: 0,\n          color: '#aeded4',\n          transformOrigin: '50% 50%'\n        },\n        {\n          opacity: 1,\n          scale: 1,\n          color: '#fff',\n          transformOrigin: '50% 50%',\n          ease: Power4.easeOut\n        },\n        0.03,\n        'start+=0'\n      )\n      tl.staggerTo(\n        split.chars,\n        0.1,\n        {\n          color: '#aeded4',\n          ease: Back.easeIn\n        },\n        0.03,\n        'start+=0.1'\n      )\n\n      tl.to(this.$refs.ex2, 0.1, {\n        opacity: 1\n      })\n      tl.staggerFromTo(\n        split2.chars,\n        0.1,\n        {\n          opacity: 0,\n          scale: 0,\n          color: '#aeded4',\n          transformOrigin: '50% 50%'\n        },\n        {\n          opacity: 1,\n          scale: 1,\n          color: '#fff',\n          transformOrigin: '50% 50%',\n          ease: Power4.easeOut\n        },\n        0.03,\n        'start1+=0'\n      )\n      tl.staggerTo(\n        split2.chars,\n        0.1,\n        {\n          color: '#ecc2a4',\n          ease: Back.easeIn\n        },\n        0.03,\n        'start1+=0.1'\n      )\n    }\n  },\n  computed: {\n    selectedUsage() {\n      return this.$store.state.selectedMethod\n    }\n  },\n  watch: {\n    selectedUsage() {\n      if (this.selectedUsage) {\n        TweenMax.set([this.$refs.ex, this.$refs.ex2], {\n          opacity: 0\n        })\n        setTimeout(() => {\n          this.typeOut()\n        }, 500)\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.usage-code {\n  padding: 0 20px;\n  margin: 20px 0;\n  background: #333;\n  border: 2px solid #f55e41;\n  transition: 0.2s all ease;\n  display: block;\n  border-radius: 5px;\n  line-height: 1.8em;\n  font-family: monospace;\n}\n\n.usage1 {\n  color: #aeded4;\n}\n\n.usage2 span {\n  color: #ecc2a4;\n}\n\n.exampleoutput,\n.exampleoutput2 {\n  display: inline-block;\n  opacity: 0;\n}\n\n.exampleoutput div,\n.exampleoutput2 div {\n  opacity: 0;\n  transform: scale(0);\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/AppCode.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('aside',[_c('div',{staticClass:\"usage-code usage1\"},[_c('p',[_c('span',[_vm._v(\"let arr = [5, 1, 8];\")]),_c('br'),_vm._v(\" \"),(_vm.selectedUsage)?_c('span',{ref:\"ex\",staticClass:\"exampleoutput\",domProps:{\"innerHTML\":_vm._s(_vm.selectedUsage.example)}}):_vm._e()])]),_vm._v(\" \"),(_vm.selectedUsage)?_c('div',{staticClass:\"usage2\"},[_c('h3',{staticStyle:{\"margin-top\":\"50px\"}},[_vm._v(\"Output\")]),_vm._v(\" \"),_c('div',{staticClass:\"usage-code\"},[_c('p',[_c('span',{ref:\"ex2\",staticClass:\"exampleoutput2\",domProps:{\"innerHTML\":_vm._s(_vm.selectedUsage.output)}})])])]):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-989b5722\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/AppCode.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-989b5722\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./AppCode.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./AppCode.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./AppCode.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-989b5722\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./AppCode.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/AppCode.vue\n// module id = null\n// module chunks = ","<template>\n  <div id=\"app\">\n    <app-github-corner />\n    <LocaleSwitcher/>\n    <main>\n      <section class=\"a\">\n        <h1>JavaScript Array Explorer</h1>\n        <p class=\"subtitle\"><em>Find the array method you need without digging through the docs</em></p>\n        <app-method-primary />\n      </section>\n      <section class=\"b\">\n        <h3 class=\"usage\">Usage</h3>\n        <app-code />\n      </section>\n    </main>\n  </div>\n</template>\n\n<script>\nimport AppMethodPrimary from './components/AppMethodPrimary'\nimport AppGithubCorner from './components/AppGithubCorner'\nimport LocaleSwitcher from './components/LocaleSwitcher'\nimport AppCode from './components/AppCode'\n\nexport default {\n  components: {\n    AppMethodPrimary,\n    AppGithubCorner,\n    LocaleSwitcher,\n    AppCode\n  }\n}\n</script>\n\n<style>\nbody,\nhtml {\n  margin: 0;\n  padding: 0;\n  color: #2c3e50;\n  background: #f6f7f7;\n}\n\n@font-face {\n  font-family: 'Gill Sans W04 Book';\n  src: url('./assets/Fonts/c4be5717-c19c-43a5-9ad3-b548ddf070d4.eot?#iefix');\n  src: url('./assets/Fonts/c4be5717-c19c-43a5-9ad3-b548ddf070d4.eot?#iefix')\n      format('eot'),\n    url('./assets/Fonts/4bfd13a9-3195-4d8f-87a9-83a212d18b16.woff2')\n      format('woff2'),\n    url('./assets/Fonts/63aa9f40-04be-453a-a672-aa8f9919115d.woff')\n      format('woff'),\n    url('./assets/Fonts/a82a5fb6-ad03-4675-801e-d3182a58ff5f.ttf')\n      format('truetype'),\n    url('./assets/Fonts/beb2cee2-1a51-44ca-848f-4f795394ee5a.svg#beb2cee2-1a51-44ca-848f-4f795394ee5a')\n      format('svg');\n}\n@font-face {\n  font-family: 'GillSansW01-MediumItali';\n  src: url('./assets/Fonts/1f6af904-724d-4f75-b836-51c3d674a37e.eot?#iefix');\n  src: url('./assets/Fonts/1f6af904-724d-4f75-b836-51c3d674a37e.eot?#iefix')\n      format('eot'),\n    url('./assets/Fonts/b01b8a8a-cb45-4c4e-b2bb-e5b8853e6fe6.woff2')\n      format('woff2'),\n    url('./assets/Fonts/3e18b964-7a6f-4828-8e18-5cc698e1051f.woff')\n      format('woff'),\n    url('./assets/Fonts/a7622e06-0cde-414a-a25d-5e5f6f5bfcaa.ttf')\n      format('truetype'),\n    url('./assets/Fonts/ca4569d2-e4c3-4dec-8bfe-52712ef6bc31.svg#ca4569d2-e4c3-4dec-8bfe-52712ef6bc31')\n      format('svg');\n}\n@font-face {\n  font-family: 'Gill Sans W01 Bold';\n  src: url('./assets/Fonts/1a6dec8e-26f9-4243-8495-835709538f92.eot?#iefix');\n  src: url('./assets/Fonts/1a6dec8e-26f9-4243-8495-835709538f92.eot?#iefix')\n      format('eot'),\n    url('./assets/Fonts/2029e71f-067d-46a8-bc44-b5c64a258928.woff2')\n      format('woff2'),\n    url('./assets/Fonts/f05272f9-83e3-4de6-8423-5d57f730c87b.woff')\n      format('woff'),\n    url('./assets/Fonts/33f5d8d9-105f-4a49-9351-74ecae7f4a49.ttf')\n      format('truetype'),\n    url('./assets/Fonts/b56150eb-5caa-4385-b907-373e97ddb2ff.svg#b56150eb-5caa-4385-b907-373e97ddb2ff')\n      format('svg');\n}\n\n#app {\n  font-family: 'Gill Sans W04 Book', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n  font-size: 19px;\n  letter-spacing: 0.005em;\n}\n\nselect,\noption {\n  font-family: 'Gill Sans W04 Book', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nselect:focus,\na:focus {\n  outline: 1px dashed #ccc;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  font-family: 'Gill Sans W01 Bold', Helvetica, Arial, sans-serif;\n}\n\nem {\n  font-family: 'GillSansW01-MediumItali', Helvetica, Arial, sans-serif;\n  font-style: normal;\n  letter-spacing: -0.01em;\n}\n\nh1 {\n  margin-bottom: 0;\n}\n\n.subtitle {\n  color: #d86f5a;\n  margin-top: 0;\n}\n\na,\na:visited,\na:active {\n  color: #d86f5a;\n  text-decoration: none;\n}\n\n/* -- grid -- */\nbody {\n  margin: 40px;\n}\n\nmain {\n  margin-top: 60px;\n  width: 95%;\n  display: grid;\n  grid-gap: 40px;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-columns: minmax(500px, auto);\n}\n\n@media screen and (max-width: 850px) {\n  main {\n    grid-template-columns: 1fr;\n  }\n}\n\n.usage {\n  margin: 35px 0 0;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('app-github-corner'),_vm._v(\" \"),_c('LocaleSwitcher'),_vm._v(\" \"),_c('main',[_c('section',{staticClass:\"a\"},[_c('h1',[_vm._v(\"JavaScript Array Explorer\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_c('app-method-primary')],1),_vm._v(\" \"),_c('section',{staticClass:\"b\"},[_c('h3',{staticClass:\"usage\"},[_vm._v(\"Usage\")]),_vm._v(\" \"),_c('app-code')],1)])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',{staticClass:\"subtitle\"},[_c('em',[_vm._v(\"Find the array method you need without digging through the docs\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3e52d6f2\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3e52d6f2\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3e52d6f2\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport { store } from './../store/index'\nimport VuePrism from 'vue-prism'\n\nVue.use(VuePrism)\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  store,\n  template: '<App/>',\n  components: { App }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","module.exports = {\"short\":\"ua\",\"long\":\"Ukrainian\",\"createdBy\":\"doubledare704\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ua/meta.json\n// module id = NVEa\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'dizideki elemanlar',\n        desc: 'Dizideki elemanlardan ekle ya da sil.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'dizinin sonundaki elemanlar',\n        desc:\n          'Bir dizinin sonuna bir veya daha fazla öğe ekler ve dizinin yeni uzunluğunu döndürür',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'bir dizinin önündeki öğeler',\n        desc:\n          'Bir dizinin önüne bir veya daha fazla öğe ekler ve dizinin yeni uzunluğunu döndürür',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'dizi başka bir dizi(ler) / değer(ler)',\n        desc:\n          'Diğer dizi (ler) ve / veya değer (ler) ile birleştirilen bu diziden oluşan yeni bir dizi döndürür.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'dizideki elemanlar',\n        desc: 'Dizideki elemanlardan ekle ya da sil.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'dizinin son elemanı',\n        desc:\n          'Dizinin son elemanını siler ve geri kalanı geri döndürür.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'dizinin ilk elemanı',\n        desc:\n          'Dizinin ilk elemanını siler ve geri kalanı geri döndürür',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'diziyi olduğu bırakmak için bir ya da daha fazla elemanın kullanımı',\n        desc:\n          '<code> slice () </ code> yöntemi, bir dizinin bir bölümünün bir kopyasını yeni bir dizi nesnesine döndürür .Yalnızca başlangıç öğesini (dizinin sonuna kadar sonlanacağı nokta) veya virgülle ayrılmış hem başlangıç hem de son ögesini belirtebilirsiniz. Bununda yeni bir dizi elde edersiniz, bu orijinal dizi değişmeyecektir.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'dizinin tüm elemanlarını bir string haline getir',\n        desc: `Dizinin tüm elemanlarını bir string haline getirir.\n         <code>elements.join(' - ')</code> kodu çıktı olarak <code>foo-bar</code> kodunu verir.`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'bir diziyi temsil eden bir string döndür',\n        desc: 'Geriye diziyi ve öğelerini temsil eden bir string döndürür.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'bir diziyi temsil eden yerelleştirilmiş bir string döndür',\n        desc:\n        'Bu biraz delice. Diziyi temsil eden yerelleştirilmiş bir string döndürür. Bu string, tarihler, para birimleri gibi durumlar için çok kullanışlıdır.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'dizinin sıralamasını tersine çevir',\n        desc:\n          'Bir dizinin elemanlarının sırasını tersine çevirir - ilki sonuncu olur ve sonuncu ilk olur.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'dizinin elemanlarını sırala',\n        desc: `Bir dizinin elemanlarını yerinde sıralar ve geriye diziyi döndürür.<br>\n        <br>\n        <strong>Önemli Not:</strong> Eğer compareFunction desteklenmiyorsa, elemanlar stringe dönüştürülüp Unicode kod sırasına göre sıralanır. Örneğin, 'Banana' elemanı 'cherry' elemanından önce gelir.  Sayısal bir sıralamada 9, 80'den önce gelir ancak Unicode düzeninde 80, 9'dan önce gelir. Dökümanlarda daha fazla bilgiye ulaşabilirsiniz.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'dizinin uzunluğunu bul',\n        desc: 'Geriye dizinin elemanlarının sayısını döndürür.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'dizinin tüm öğelerini statik bir değerle doldur',\n        desc:\n          'Bir dizinin tüm öğelerini bir başlangıç noktasından bir bitiş noktasına kadar statik değer ile doldurur.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'dizi içindeki dizi elemanlarının bir dizisini kopyala',\n        desc:\n          'Dizideki dizi öğelerinin bir dizisini kopyalar. Yalnızca bitiş öğesinin (başlangıçta sıfıra varsayılan olarak sıfır) veya hem başlangıç hem de son, virgülle ayrılmış olarak belirtebilirsiniz.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'her eleman için yapılacak bir işlevi yürüt',\n        desc:\n          'ForEach () yöntemi, her dizi elemanı için bir kez sağlanan bir işlevi yürütür.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'bir fonksiyon ile her ögeden yeni bir dizi oluştur',\n        desc:\n          'Bu dizideki her öğede sağlanan bir fonksiyon çağırmanın sonuçlarıyla yeni bir dizi oluşturur.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'bir yineleyici obje oluştur',\n        desc:\n          'Dizideki her dizinin anahtar / değer çiftlerini içeren yeni bir Array Iterator nesnesi döndürür. Yineleyiciler için, bununla birlikte kullanılan diğer yöntemlerin yanı sıra <code> values </ code> ve <code> keys </ code> gibi birçok kullanım alanı vardır.',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// 0, sırası</span><br>\n        <span class=\"comment\">// 5, ilk eleman</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'belli bir element var ise',\n          desc:\n            'Bir dizinin belirli bir öğeyi içerip içermediğini, uygun olduğunda true veya false döndürüp döndürmeyeceğini belirler.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'bir elemanın ilk indeksini bulur',\n          desc:\n            'Belirli bir öğenin dizide bulunabileceği ilk dizini bulur veya mevcut değilse -1 değerini döndürür.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'bir elemanın son indeksini bulur',\n          desc:\n            'Dizideki bir öğenin belirtilen değere eşit olan son (en büyük) indeksini veya hiçbiri bulunamazsa -1 değerini döndürür.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'bir koşulu karşılayan ilk durum',\n          desc:\n            'Dizideki bir öğe sağlanan test işlevini karşılarsa veya bulunmazsa tanımlanmamışsa dizideki bulunan değeri döndürür. <Code> findIndex () </ code> öğesine benzer, ancak indeks yerine öğeyi döndürür.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'bir koşulu karşılayan bir elemanın ilk indeksi',\n          desc:\n            'Sağlanan test işlevini karşılayan dizideki ilk öğenin dizinini döndürür. Aksi takdirde -1 iade edilir. <Code> find () </ code> öğesine benzer, ancak öğenin yerine dizini döndürür..',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'diziden bir değeri indirge (Soldan sağa)',\n          desc:\n            'Bir akümülatöre ve dizinin her bir değerine (soldan sağa) bir işlevi tek bir değere indirgemek için uygulayın.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'diziden bir değeri indirge (Sağdan sola)',\n          desc:\n            'Bir akümülatöre ve dizinin her bir değerine (sağdan sola) bir işlevi tek bir değere indirgemek için uygulayın.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'bir koşula göre filtreleme yap',\n          desc:\n            'Sağlanan filtreleme işlevinin doğru olarak döndüğü bu dizinin tüm öğelerini içeren yeni bir dizi oluşturur.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'her eleman için bir koşulu kontrol et',\n          desc:\n            'Bu dizideki her öğe sağlanan test işlevini karşılarsa true değerini döndürür.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'en az bir eleman için koşulu kontrol et',\n          desc:\n            'Bu dizideki en az bir eleman sağlanan sınama işlevini karşılarsa true değerini döndürür.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/tr/index.js\n// module id = Uefv\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'element/elemente u niz',\n        desc: 'Dodaje i/ili uklanja elemente iz niza.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'elemente na kraj niza',\n        desc:\n          'Dodaje jedan ili više elemenata na kraj niza i vraća novu dužinu niza.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'elemente na početak niza',\n        desc:\n          'Dodaje jedan ili više elemenata na početak niza i vraća novu dužinu niza.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'ovaj niz sa drugim nizom/nizovima i/ili vrednošću/vrednostima',\n        desc:\n          'Vraća novi niz koji se sastoji od ovog niza i drugog niza/nizova i/ili vrednosti.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'element/elemente iz niza',\n        desc: 'Dodaje i/ili uklanja elemente iz niza.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'poslednji element niza',\n        desc:\n          'Uklanja poslednji element iz niza i vraća taj element.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'prvi element niza',\n        desc:\n          'Uklanja prvi element iz niza i vraća taj element.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'jedan ili više elemenata za upotrebu, ostavljajući niz onakvim kakav jeste',\n        desc:\n          '<code>Slice()</code> metod vraća plitku kopiju porcije niza u novi objekat niza. Možete odrediti ili samo početni element (gde će kraj podrazumevano biti dužina niza) ili i početnu i krajnju vrednost, odvojene zarezom. Originalni niz će ostati neizmenjen.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'pridružim sve elemente niza u jedan string.',\n        desc: `Pridružuje sve elemente niza u jedan string. Možete ih pridružiti zajedno onakve kakvi jesi, ili sa nečim između, npr. <code>elements.join(' -\n          ')</code> proizvodi <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'vratim string koji predstavlja niz.',\n        desc: 'Vraća string koji predstavlja niz i njegove elemente.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'vratim lokalizovan string koji predstavlja niz.',\n        desc:\n          'Ovo je pomalo čudno. Vraća lokalizovan string koji predstavlja niz i njegove vrednosti. Ovo je veoma korisno za datume i valute, i ima neke čudne prirodne apstrakcije, tako da je najbolje konsultovati dokumentaciju pri njegovom korišćenju.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'okrenem redosled niza',\n        desc:\n          'Preokreće redosled elemenata datog niza — prvi element postaje zadnji, a zadnji postaje prvi.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'sortiram elemente niza',\n        desc: `Sortira elemente datog niza i vraća niz.<br>\n        <br>\n        <strong>Važna napomena:</strong>Ako compareFunction nije obezbeđena, elementi su sortirani konvertovanjem u stringove i poređenjem stringova u Unicode kodnom redosledu. Na primer, \"Banana\" dolazi pre \"cherry\". U numeričkom sortiranju, 9 dolazi pre 80, ali zbog toga što su brojevi konvertovani u stringove, \"80\" dolazi pre \"9\" u Unicode redosledu. Dokumentacija sadrži više informacija koje ovo pojašnjavaju.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'pronađem dužinu niza',\n        desc: 'Vraća broj elemenata datog niza.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'popunim sve elemente niza statičkom vrednošću',\n        desc:\n          'Popunjava sve elemente niza od početnog indeksa do krajnjeg indeksa sa statičkom vrednošću.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'kopiram sekvencu elemenata nizu unutar niza.',\n        desc:\n          'Kopira sekvencu elemenata niza unutar niza. Možete odrediti ili krajnji element (gde će početak podrazumevano biti nula) ili i početnu i krajnju vrednost, odvojene zarezom.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'izvršavanju funkcije koju ću da kreiram za svaki element',\n        desc:\n          'forEach() metod izvršava datu funkciju nad svakim elementom niza jedanput.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'kreiranju novog niza od svakog elementa sa funkcijom koju kreiram',\n        desc:\n          'Kreira novi niz sa rezultatima pozvane funkcije nad svakim elementom u ovom nizu.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'kreiranjem iterator objekta',\n        desc:\n          'Vraća novi Array Iterrator objekat koji sadrži key/value parove za svaki indeks u nizu. Postoji dosta upotreba iteratora, kao i drugih metoda u sprezi sa njima, kao npr. <code>values</code> i <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'ako postoji određeni element',\n          desc:\n            'Ustanovljava da li niz sadrži određeni element, vraćajuću true ili false vrednosti.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'prvi indeks određenog elementa',\n          desc:\n            'Vraća prvi indeks na kom se dati element može pronaći u nizu, ili -1 ako on nije prisutan.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'zadnji indeks određenog elementa',\n          desc:\n            'Vraća zadnji (najveći) indeks određenog elementa u nizu koji je jednak određenoj vrednosti, ili -1 ako nijedan nije pronađen.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'prvi element koji zadovoljava određen uslov',\n          desc:\n            'Vraća pronađenu vrednost unutar niza, ako element u nizu zadovoljava datu test funkciju ili undefined ako nije pronađen. Slično kao <code>findIndex()</code>, s tim što vraća vrednost umesto indeks.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'prvi indeks elementa koji zadovoljava određen uslov',\n          desc:\n            'Vraća indeks prvog elementa u nizu koji zadovoljava datu test funkciju. U suprotnom vraća -1. Slično kao <code>find()</code>, s tim što vraća indeks umesto vrednosti.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'vrednost redukujući niz, od početka do kraja',\n          desc:\n            'Primenjuje funkciju na akumulator i svaku vrednost niza (sa leva na desno) kako bi je smanjio na jednu vrednost.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'vrednost redukujući niz, od kraja do početka',\n          desc:\n            'Primenjuje funkciju na akumulator i svaku vrednost niza (sa desna na levo) kako bi je smanjio na jednu vrednost.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'vrednosti na osnovu uslova koji ja zadam',\n          desc:\n            'Kreira novi niz sa svim elementima ovog niza za koji data filter funkcija vraća true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'da li svaki element zadovoljava određen uslov ili ne',\n          desc:\n            'Vraća true ako svaki element u ovom nizu zadovoljava datu test funkciju',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'da li barem jedan element zadovoljava određen uslov ili ne',\n          desc:\n            'Vraća true ako barem jedan element u ovom nizu zadovoljava datu test funkciju',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/sr/index.js\n// module id = VITF\n// module chunks = 1","module.exports = {\"short\":\"fr\",\"long\":\"French\",\"createdBy\":\"julienmartin\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/fr/meta.json\n// module id = W+34\n// module chunks = 1","module.exports = {\"short\":\"bg\",\"long\":\"Bulgarian\",\"createdBy\":\"imbyurhan\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/bg/meta.json\n// module id = WYaq\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'елемент(и) в масив',\n        desc: 'Добавя и/или премахва елементи от масив.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'елементи в края на масива',\n        desc:\n          'Добавя един или повече елементи в края на масива и връща новата дължина на масива.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'елементи в началото на масива',\n        desc:\n          'Добавя един или повече елементи в началото на масива и връща новата дължина на масива.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'този масив в друг масив(и) и/или стойност(и)',\n        desc:\n          'Връща нов масив, съставен от този масив, свързан с друг масив(и) и/или стойност(и).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'елемент(и) от масив',\n        desc: 'Добавя и/или премахва елементи от масив.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'последният елемент на масива',\n        desc: 'Премахва последния елемент от масив и връща този елемент.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'първият елемент на масива',\n        desc: 'Премахва първия елемент от масив и връща този елемент.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'едно или повече елементи за употреба, оставяйки масива, както е',\n        desc:\n          'Методът <code>slice()</code> връща плитко копие на част от масив в нов обект от масив. Можете да посочите или само крайния елемент (откъдето започва да е по подразбиране до нула) или и началото, и края, разделени със запетая. Оригиналният масив няма да бъде променен.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'присъединете всички елементи на масива към низ',\n        desc: `Присъединява всички елементи на масива към низ. Можете да ги присъедините заедно, както е или с нещо между тях, <code>elements.join ('-')</code> ви дава <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'връща низ, представляващ масива',\n        desc: 'Връща низ, представляващ масива и неговите елементи.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'връща локализиран низ, представляващ масива',\n        desc:\n          'Това е малко вълшебство. Връща локализиран низ, представляващ масива и неговите елементи. Това е много полезно за дати и валута и има някои странни местни абстракции, така че най-добре да се консултирате с документите, когато го използвате.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'обръщане на реда на масива',\n        desc:\n          'Обръща реда на елементите на масив на място - първият става последният и последният става първият.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'сортирайте елементите на масива',\n        desc: 'Сортира елементите на масив на място и връща масива.',\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'намерете дължината на масива',\n        desc: 'Връща броя елементи в този масив.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'попълнете всички елементи на масива със статична стойност',\n        desc:\n          'Запълва всички елементи на масива от начален индекс до крайния индекс със статична стойност.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'копирайте последователност от масивни елементи в масива.',\n        desc:\n          'Копира последователност от масивни елементи в масива. Можете да посочите или само крайния елемент (откъдето започва да е по подразбиране до нула) или и началото, и края, разделени със запетая.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'изпълнявайки функция, която ще създам за всеки елемент',\n        desc:\n          'Методът forEach() изпълнява една предоставена функция веднъж за всеки елемент на масива.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br> \n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'създаване на нов масив от всеки елемент с функция, която създавам',\n        desc:\n          'Създава нов масив с резултатите от извикването на дадена функция на всеки елемент в този масив.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'създаване на обект итератор',\n        desc:\n          'Връща нов обект от Array Iterator, който съдържа двойките ключ/стойност за всеки индекс в масива. Има много приложения за итераторите, както и други методи, използвани с него, като <code>values</code> и <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'ако има определен елемент',\n          desc:\n            'Определя дали даден масив съдържа определен елемент, връщайки се true или false, както е подходящо.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'първият индекс на конкретен елемент',\n          desc:\n            'Връща първия индекс, при който даден елемент може да бъде намерен в масива, или -1, ако то не присъства.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'последния индекс на конкретен елемент',\n          desc:\n            'Връща последния (най-голям) индекс на елемент в масива, равен на зададената стойност, или -1, ако не е намерен.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'първият елемент, който удовлетворява едно условие',\n          desc:\n            'Връща намерената стойност в масива, ако елемент в масива удовлетворява предоставената функция за тестване или недефинирана, ако не е намерена. Подобно на <code>findIndex()</code>, но връща елемента вместо индекса.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc:\n            'първият индекс на елемент, който отговаря на дадено условие',\n          desc:\n            'Връща индекса на първия елемент в масива, който удовлетворява предоставената функция за тестване. В противен случай -1 се връща. Подобно на <code>find()</code>, но връща индекса вместо елемента.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc:\n            'стойност чрез намаляване на масива, започни за да свършиш',\n          desc:\n            'Прилагайте функция срещу акумулатор и всяка стойност на масива (от ляво на дясно), за да го намалите до единична стойност.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc:\n            'стойност чрез намаляване на масива, завърши за да започнеш',\n          desc:\n            'Прилагайте функция срещу акумулатор и всяка стойност на масива (от дясно на ляво), за да го намалите до единична стойност.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'стойности въз основа на състояние, което създавам',\n          desc:\n            'Създава нов масив с всички елементи на този масив, за които предоставената филтрираща функция връща true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc:\n            'независимо от това дали всеки елемент отговаря на дадено условие',\n          desc:\n            'Връща true, ако всеки елемент в този масив удовлетворява предоставената функция за тестване.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc:\n            'независимо дали поне един елемент отговаря на дадено условие',\n          desc:\n            'Връща true, ако поне един елемент в този масив отговаря на предоставената функция за тестване.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/bg/index.js\n// module id = WbDD\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'un ou des éléments à un tableau',\n        desc:\n          \"Modifie le contenu d'un tableau en retirant des éléments et/ou en ajoutant de nouveaux éléments.\",\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: \"un ou des éléments à la fin d'un tableau\",\n        desc:\n          \"Ajoute un ou plusieurs éléments à la fin d'un tableau et retourne la nouvelle taille du tableau.\",\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: \"un ou des éléments au début d'un tableau\",\n        desc:\n          \"Ajoute un ou plusieurs éléments au début d'un tableau et renvoie la nouvelle longueur du tableau.\",\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: \"ce tableau à d'autre(s) tableau(x) et/ou valeur(s)\",\n        desc:\n          \"Renvoie un nouveau tableau qui est le résultat de la concaténation d'un ou plusieurs tableaux.\",\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'un ou des éléments à un tableau',\n        desc:\n          \"Modifie le contenu d'un tableau en retirant des éléments et/ou en ajoutant de nouveaux éléments.\",\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: \"le dernier élément d'un tableau\",\n        desc:\n          \"Supprime le dernier élément d'un tableau et retourne cet élément.\",\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: \"le premier élément d'un tableau\",\n        desc:\n          \"Supprime le premier élément d'un tableau et retourne cet élément.\",\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          \"un ou plusieurs éléments successifs, sans modifier le tableau d'origine\",\n        desc:\n          \"Renvoie un objet tableau, contenant une copie superficielle (shallow copy) d'une portion du tableau d'origine. Il est possible de spécifier juste l'indice de début (et l'indice de fin sera la longueur du tableau) ou les deux indices (début et fin, séparés par une virgule). Le tableau original ne sera pas modifié.\",\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc:\n          \"de concaténer tous les éléments d'un tableau dans une chaîne de caractères\",\n        desc: `Concaténe tous les éléments d'un tableau dans une chaîne de caractères et renvoie cette nouvelle chaîne de caractères. Il est possible de concaténer tel quel ou avec un séparateur, <code>elements.join(' - ')</code> renvoie <code>foo - bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc:\n          'de retourner une chaîne de caractères représentant le tableau',\n        desc:\n          'Renvoie une chaîne de caractères représentant le tableau spécifié et ses éléments.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc:\n          'de retourner une chaîne de caractères localisée représentant le tableau',\n        desc:\n          \"Cette méthode est un peu touchy. Renvoie une chaîne de caractères localisée représentant le tableau spécifié et ses éléments. C'est vraiment utile pour les dates et les devises ! Le mieux est de consulter la documentation quand on souhaite l'utiliser car certains comportements sont étranges.\",\n        example: `let date = [new Date()];<br>\n        arr.toLocaleString();<br>\n        date.toLocaleString();<br>\n        console.log(arr, date);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: \"d'inverser l'ordre d'un tableau\",\n        desc:\n          \"Inverse l'ordre d'un tableau : le premier élément devient le dernier et le dernier devient le premier et ainsi de suite.\",\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: \"de trier les éléments d'un tableau\",\n        desc:\n          `Trie les éléments d'un tableau, dans ce même tableau, et renvoie le tableau.\n          <br>\n          <strong>Note importante :</strong> Si aucune fonction de comparaison n'est fournie, les éléments sont triés en les convertisant en chaîne de caractères et en les comparant à partir du point de code Unicode. Par exemple, \"Banana\" vient avant \"cherry\". Dans un tri numérique, 9 vient avant 80, parceque les nombres sont convertis en chaîne de caractères, \"80\" vient avant \"9\" dans l'odre Unicode. La documentation contient plus d'informations à ce sujet.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: \"de trouver la taille d'un tableau\",\n        desc: \"Retourne le nombre d'éléments présents dans le tableau.\",\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc:\n          \"de remplir tous les éléments d'un tableau avec une valeur statique\",\n        desc:\n          \"Remplit tous les éléments d'un tableau entre deux indices avec une valeur statique.\",\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: \"de copier une partie d'un tableau\",\n        desc:\n          \"Effectue une copie superficielle (shallow copy) d'une partie d'un tableau sur ce même tableau et le renvoie, sans modifier sa taille.\",\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'exécutant une fonction sur chaque élément',\n        desc: 'Exécute une fonction donnée sur chaque élément du tableau.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'créant un nouveau tableau depuis chaque élément via une fonction',\n        desc:\n          \"Crée un nouveau tableau composé des résultats d'une fonction donnée en argument sur chaque élément du tableau.\",\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'créant un objet Array Iterator',\n        desc:\n          \"Renvoie un nouvel objet de type Array Iterator qui contient le couple clef/valeur pour chaque élément du tableau. Il y a beaucoup de cas d'utilisation des iterators, mais aussi les autres méthodes à utiliser comme <code>values</code> et <code>keys</code>\",\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'si un élément existe',\n          desc:\n            \"Permet de déterminer si un tableau contient un élément et renvoie <code>true</code> si c'est le cas, <code>false</code> sinon.\",\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: \"le premier indice d'un élément en particulier\",\n          desc:\n            \"Renvoie le premier indice pour lequel on trouve un élément donné dans un tableau. Si l'élément cherché n'est pas présent dans le tableau, la méthode renverra -1.\",\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: \"le dernier indice d'un élément en particulier\",\n          desc:\n            \"Permet de renvoyer le dernier indice pour lequel une valeur donnée est présente dans un tableau. Si la valeur recherchée n'est pas présente, le résultat sera -1.\",\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'le premier élément qui respecte une condition',\n          desc:\n            \"Renvoie la valeur du premier élément trouvé dans le tableau qui respecte la condition donnée par la fonction de test passée en argument. Sinon, la valeur <code>undefined</code> est renvoyée. Similaire à <code>findIndex()</code>, mais retourne l'élément au lieu de l'indice.\",\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'le premier indice qui respecte une condition',\n          desc:\n            \"Renvoie l'indice du premier élément du tableau qui satisfait une condition donnée par une fonction. Si la fonction renvoie <code>false</code> pour tous les éléments du tableau, le résultat vaut -1. Similaire à <code>find()</code>, mais retourne l'indice au lieu de l'élément.\",\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'une valeur en réduisant le tableau, du début à la fin',\n          desc:\n            \"Applique une fonction qui est un accumulateur et qui traite chaque valeur d'une liste (de la gauche vers la droite) afin de la réduire à une seule valeur.\",\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'une valeur en réduisant le tableau, de la fin au début',\n          desc:\n            \"Applique une fonction qui est un accumulateur et qui traite chaque valeur d'une liste (de la droite vers la gauche) afin de la réduire à une seule valeur.\",\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'des éléments basés sur une condition',\n          desc:\n            \"Crée et retourne un nouveau tableau contenant tous les éléments du tableau d'origine qui remplissent une condition déterminée par la fonction callback.\",\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'si oui ou non tous les éléments respectent une condition',\n          desc:\n            \"Permet de tester si tous les éléments d'un tableau vérifient une condition donnée par une fonction en argument.\",\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'si oui ou non au moins un élément respecte une condition',\n          desc:\n            'Teste si au moins un élément du tableau passe le test implémenté par la fonction fournie.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/fr/index.js\n// module id = YsDL\n// module chunks = 1","module.exports = {\"short\":\"tr\",\"long\":\"Türkçe\",\"createdBy\":\"ahmetozantekin\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/tr/meta.json\n// module id = ZBXR\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'element/s to an array',\n        desc: 'Adds and/or removes elements from an array.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'elements to the end of an array',\n        desc:\n          'Adds one or more elements to the end of an array and returns the new length of the array.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'elements to the front of an array',\n        desc:\n          'Adds one or more elements to the front of an array and returns the new length of the array.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'this array to other array(s) and/or value(s)',\n        desc:\n          'Returns a new array comprised of this array joined with other array(s) and/or value(s).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'element/s from an array',\n        desc: 'Adds and/or removes elements from an array.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'the last element of the array',\n        desc:\n          'Removes the last element from an array and returns that element.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'the first element of the array',\n        desc:\n          'Removes the first element from an array and returns that element.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'one or more elements in order for use, leaving the array as is',\n        desc:\n          'The <code>slice()</code> method returns a shallow copy of a portion of an array into a new array object. You can specify either just the beginning element (where end will default to the arrays length) or both the beginning and the end, comma-separated. The original array will not be modified.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'join all elements of the array into a string',\n        desc: `Joins all elements of an array into a string. You can join it together as is or with something in between, <code>elements.join(' -\n          ')</code> gives you <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'return a string representing the array.',\n        desc: 'Returns a string representing the array and its elements.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'return a localized string representing the array.',\n        desc:\n          'This one is a bit wacko. Returns a localized string representing the array and its elements. This is very useful for dates and currency and has some strange native abstractions, so best to consult the docs when using it',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'reverse the order of the array',\n        desc:\n          'Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'sort the items of the array',\n        desc: `Sorts the elements of an array in place and returns the array.<br>\n        <br>\n        <strong>Important note:</strong> If compareFunction is not supplied, elements are sorted by converting them to strings and comparing strings in Unicode code point order. For example, \"Banana\" comes before \"cherry\". In a numeric sort, 9 comes before 80, but because numbers are converted to strings, \"80\" comes before \"9\" in Unicode order. The docs have more information to clarify.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'find the length of the array',\n        desc: 'Returns the number of elements in that array.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'fill all the elements of the array with a static value',\n        desc:\n          'Fills all the elements of an array from a start index to an end index with a static value.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'copy a sequence of array elements within the array.',\n        desc:\n          'Copies a sequence of array elements within the array. You can specify either just the ending element (where begin will default to zero) or both the beginning and the end, comma-separated.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'executing a function I will create for each element',\n        desc:\n          'The forEach() method executes a provided function once for each array element.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'creating a new array from each element with a function I create',\n        desc:\n          'Creates a new array with the results of calling a provided function on every element in this array.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'creating an iterator object',\n        desc:\n          'Returns a new Array Iterator object that contains the key/value pairs for each index in the array. There are a lot of uses for iterators, as well as other methods used with it in conjuction, like <code>values</code> and <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'out if a certain element exists',\n          desc:\n            'Determines whether an array contains a certain element, returning true or false as appropriate.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'the first index of a particular item',\n          desc:\n            'Returns the first index at which a given element can be found in the array, or -1 if it is not present.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'the last index of a particular item',\n          desc:\n            'Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'the first element that satisfies a condition',\n          desc:\n            'Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. Similar to <code>findIndex()</code>, but it returns the item instead of the index.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'the first index of an item that satisfies a condition',\n          desc:\n            'Returns the index of the first element in the array that satisfies the provided testing function. Otherwise -1 is returned. Similar to <code>find()</code>, but it returns the index instead of the item.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'a value by reducing the Array, start to finish',\n          desc:\n            'Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'a value by reducing the Array, finish to start',\n          desc:\n            'Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'values based on a condition I create',\n          desc:\n            'Creates a new array with all of the elements of this array for which the provided filtering function returns true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'whether or not every item satisfies a condition',\n          desc:\n            'Returns true if every element in this array satisfies the provided testing function.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'whether or not at least one item satisfies a condition',\n          desc:\n            'Returns true if at least one element in this array satisfies the provided testing function.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/en/index.js\n// module id = cACW\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: '配列へ要素を追加 かつ/または 削除',\n        desc: '配列へ要素を追加する かつ/または 削除します。',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: '配列の末尾へ要素を追加',\n        desc:\n          '一つ以上の要素を配列の末尾へ追加し、新しい配列の長さを返します。',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: '配列の先頭へ要素を追加',\n        desc:\n          '一つ以上の要素を配列の先頭へ追加し、新しい配列の長さを返します。',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: '他の配列 および/または 値と結合された新しい配列を得る',\n        desc:\n          'この配列と、他の配列 および/または 値と結合された新しい配列を返します。',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: '配列へ要素を追加 かつ/または 削除',\n        desc: '配列へ要素を追加する かつ/または 削除します。',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: '配列の最後の要素を取り出して削除',\n        desc:\n          '配列の最後の要素を返し、元の配列からはこの要素を削除します。',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: '配列の最初の要素を取り出して削除',\n        desc:\n          '配列の最初の要素を返し、元の配列からはこの要素を削除します。',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          '元の配列はそのままに、一つ以上の要素を削除した配列を得る',\n        desc:\n          '<code>slice()</code> メソッドは配列の一部のコピーから新しい配列を作成して返します。開始位置だけ指定しても、開始位置と終了位置の両方をカンマ区切りで指定しても構いません。元の配列に変化はありません。',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: '配列内の全ての要素を結合して文字列にする',\n        desc: `配列の全ての要素を結合した文字列を返します。そのまま結合することもできますし、間に挟む文字を指定することもできます。<code>elements.join(' -\n          ')</code> は <code>foo-bar</code> を返します。`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: '配列を表す文字列を返す',\n        desc: '配列を表す文字列を返します。',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: '配列を表すローカライズされた文字列を返す',\n        desc:\n          'これはちょっと変わったやつです。配列とその要素を表すローカライズされた文字列を返します。日付や通貨を扱うのにとても便利ですが、独特なネイティブの抽象化があります。使用するときはドキュメントを参照してください。',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: '配列を逆順に並べ替える',\n        desc:\n          '配列をその場で逆順に並べ替えます — 最初の要素は最後に、最後の要素は最初になります。',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: '配列をソートする',\n        desc: `配列の要素をその場でソートし、ソート済みの配列を返します。<br>\n        <br>\n        <strong>重要:</strong> 比較用の関数が指定されない場合、要素は文字列に変換された状態におけるUnicodeでの並び順にソートされます。たとえば \"Banana\" は \"cherry\" の前に来ます。数値のソートであれば 9 が 80 の前に来ますが、数値が文字列に変換されるとUnicode順になるので \"80\" は \"9\" よりも前に来ます。詳しくはドキュメントを参照してください。`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: '配列の長さを返す',\n        desc: '配列内の要素の数を返します。',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: '静的な値で配列の全ての要素を埋める',\n        desc:\n          '配列内の開始インデックスから終了インデックスまでの全要素を、静的な値で置き換えます。',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: '配列内の連続した要素を同じ配列内にコピーする',\n        desc:\n          '配列内の連続した要素を同じ配列内にコピーします。終了位置の要素だけを指定してもよいですし (開始位置はデフォルト 0 になります) 、開始位置と終了位置の両方をカンマ区切りで指定しても構いません。',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: '各要素に対し関数を実行する',\n        desc:\n          'forEach() メソッドは、指定された関数を各要素に対し1回ずつ実行します。',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          '各要素を関数に通した結果から新しい配列を作成する',\n        desc:\n          '配列内の各要素に対し、与えられた関数を実行した結果をもとに、新しい配列を作成します。',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'イテレータオブジェクトを作成する',\n        desc:\n          '配列のインデックスに用いられるキー/バリューのペアを含む、新しい配列イテレータオブジェクトを返します。<code>values()</code> や <code>keys()</code> のような、一緒に使われるメソッドと同様に、イテレータの用途はさまざまです。',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'ある要素が含まれているかどうかを知る',\n          desc:\n            '配列が特定の要素を含んでいるかを判断し、true または false を返します。',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: '指定した要素の最初のインデックスを得る',\n          desc:\n            '指定された要素が配列内に現れる最初のインデックスを返します。もし存在しなければ、-1 を返します。',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: '指定した要素の最後のインデックスを得る',\n          desc:\n            '指定された要素が配列内に現れる最後の (最大の) インデックスを返します。もし存在しなければ、-1 を返します。',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: '条件に合致する最初の要素を得る',\n          desc:\n            '指定された関数の条件を満たす、配列内の最初の要素を返します。該当する要素がなければ undefined を返します。<code>findIndex()</code>に似ていますが、インデックスの代わりに要素そのものを返します。',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: '条件に合致する最初の要素のインデックスを得る',\n          desc:\n            '指定された関数の条件を満たす、配列内の最初の要素のインデックスを返します。該当する要素がなければ -1 を返します。<code>find()</code>に似ていますが、要素そのものの代わりにインデックスを返します。',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: '配列を最初から最後までreduceした値を得る',\n          desc:\n            '配列内の各値とアキュムレータに対し、関数を左から右へ適用して単一の値にします。',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: '配列を最後から最初までreduceした値を得る',\n          desc:\n            '配列内の各値とアキュムレータに対し、関数を右から左へ適用して単一の値にします。',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: '指定した条件に合致する値を得る',\n          desc:\n            '配列内の全要素のうち、フィルタ関数が true を返す要素を使って新しい配列を作成します。',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: '全ての要素が条件に合致するかどうかを知る',\n          desc:\n            '配列内の全ての要素が、指定された関数の条件に合致する場合、true を返します。',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: '一つでも条件に合致する要素が存在するかどうかを知る',\n          desc:\n            '配列内に、一つでも指定された関数の条件に合致する要素が存在する場合、true を返します。',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ja/index.js\n// module id = dByq\n// module chunks = 1","module.exports = {\"short\":\"de\",\"long\":\"German\",\"createdBy\":\"bahe007 and AWolf81\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/de/meta.json\n// module id = dLso\n// module chunks = 1","module.exports = {\"short\":\"it\",\"long\":\"Italian\",\"createdBy\":\"nicolo-ribaudo\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/it/meta.json\n// module id = htUn\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'elemento/s en un array',\n        desc: 'Añade y/o elimina elementos de un array.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n                console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'elementos al final de un array',\n        desc:\n          'Añade uno o más elementos al final de un array y devuelve la nueva longitud del array.',\n        example: `arr.push(2);<br>\n                console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'elementos al principio de un array',\n        desc:\n          'Añade uno o más elementos al principio de un array y devuelve la nueva longitud del array.',\n        example: `arr.unshift(2, 7);<br>\n                console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'este array con otro(s) array(s) y/o valor(es)',\n        desc:\n          'Devuelve un nuevo array compuesto por este array unido a otro(s) array(s) y/o valor(es).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n                let arr3 = arr.concat(arr2);<br>\n                console.log(arr);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'elemento/s en un array',\n        desc: 'Añade y/o elimina elementos de un array.',\n        example: `arr.splice(2, 1);<br>\n                console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'el último elemento del array',\n        desc: 'Elimina el último elemento de un array y lo devuelve.',\n        example: `arr.pop();<br>\n                console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'el primer elemento del array',\n        desc: 'Elimina el primer elemento de un array y lo devuelve.',\n        example: `arr.shift();<br>\n                console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'uno o más elementos en orden de uso, dejando el array como está',\n        desc:\n          'El método <code>slice()</code> devuelve una copia de una parte del array dentro de un nuevo array. Puede especificar sólo el elemento final (donde el inicio será cero) o el principio y el final separados por comas. El array original no se modificará.',\n        example: `let slicedArr = arr.slice(1);<br>\n                console.log(arr);<br>\n                console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n                [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'unir todos los elementos del array en una cadena',\n        desc: `Une todos los elementos de un array en una cadena. Puede unirlo como está o con algo intermedio (un separador), <code>elements.join(' - ')</code> le da <code>foo - bar</code>`,\n        example: `arr.join();<br>\n                console.log(arr);`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'devolver una cadena de caracteres representando el array.',\n        desc:\n          'Devuelve una cadena de caracteres que representa el array y sus elementos.',\n        example: `arr.toString();<br>\n                console.log(arr);`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc:\n          'devolver la representación del array como una cadena utilizando la configuración regional.',\n        desc:\n          'Este es un poco loco. Devuelve la representación del array como una cadena utilizando la configuración regional. Esto es muy útil para fechas y moneda y tiene algunas extrañas abstracciones nativas, por lo que es mejor consultar los documentos al utilizarlo.',\n        example: `let date = [new Date()];<br>\n                const arrString = arr.toLocaleString();<br>\n                const dateString = date.toLocaleString();<br>\n                console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'invertir el orden del array',\n        desc:\n          'Invierte el orden de los elementos de un array - el primero se convierte en el último, y el último en el primero.',\n        example: `arr.reverse();<br>\n                console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'ordenar los elementos del array',\n        desc: 'Ordena los elementos de un array y lo devuelve.',\n        example: `arr.sort();<br>\n                console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'encontrar la longitud del array',\n        desc: 'Devuelve el número de elementos en ese array.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'llenar todos los elementos del array con un valor estático',\n        desc:\n          'Llena todos los elementos de un array desde un índice inicial hasta un índice final con un valor estático.',\n        example: `arr.fill(2);<br>\n                console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc:\n          'copiar una secuencia de elementos del array dentro del array.',\n        desc:\n          'Copia una secuencia de elementos del array dentro del array. Puede especificar sólo el elemento final (donde el inicio será cero) o el principio y el final separados por comas.',\n        example: `arr.copyWithin(1);<br>\n                console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'ejecutar una función creada para cada elemento',\n        desc:\n          'El método forEach() ejecuta una función determinada para cada elemento del array.',\n        example: `arr.forEach((element) => {<br>\n                <span>&nbsp;&nbsp;</span>console.log(element)<br>\n                });`,\n        output: `5<br>\n                1<br>\n                8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'crear un nuevo array a partir de cada elemento con una función creada por el usuario',\n        desc:\n          'Crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.',\n        example: `let map = arr.map(x => x + 1);<br>\n                console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'crear un objeto iterador',\n        desc:\n          'Devuelve un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz. Hay muchos usos para los iteradores, así como otros métodos utilizados con ellos en conjunto, como <code>values</code> y <code>keys</code>.',\n        example: `let iterator = arr.entries();<br>\n                console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n                <span class=\"comment\">// the 0 is the index,</span><br>\n                <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'si existe un elemento determinado',\n          desc:\n            'Determina si un array contiene un elemento determinado, devolviendo verdadero o falso según corresponda.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc:\n            'el primer índice en el que se puede encontrar un elemento',\n          desc:\n            'Devuelve el primer índice en el que se puede encontrar un elemento dado en el array, o -1 si no está presente.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc:\n            'el ultimo índice en el que se puede encontrar un elemento',\n          desc:\n            'Devuelve el último índice (máximo) de un elemento dentro del array igual al valor especificado, o -1 si no se encuentra ninguno.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'el primer elemento que satisface una condición',\n          desc:\n            'Devuelve el valor encontrado en el array, si un elemento del array satisface la función de prueba provista o undefined si no se encuentra. Similar a <code>findIndex()</code>, pero devuelve el ítem en lugar del índice.',\n          example: `let isTiny = (el) => el < 2;<br>\n                    console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc:\n            'el primer índice de un artículo que satisface una condición',\n          desc:\n            'Devuelve el índice del primer elemento del array que satisface la función de prueba proporcionada. De lo contrario, se devuelve -1. Similar a <code>find()</code>, pero devuelve el índice en lugar del elemento.',\n          example: `let isBig = (el) => el > 6;<br>\n                    console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'un valor para reducir el Array, de principio a fin',\n          desc:\n            'Aplica una función a un acumulador y a cada valor de un array (de izquierda a derecha) para reducirlo a un único valor.',\n          example: `let reducer = (a, b) => a + b;<br>\n                    console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'un valor para reducir el Array, de fin a principio',\n          desc:\n            'Aplica una función a un acumulador y a cada valor de un array (de derecha a izquierda) para reducirlo a un único valor.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n                      <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n                      }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'valores basados en una condición que usted crea',\n          desc:\n            'Crea un nuevo array con todos los elementos de este array para el cual la función de filtrado proporcionada devuelve true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n                    console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'si cada elemento satisface o no una condición',\n          desc:\n            'Devuelve true si cada elemento de este array satisface la función de prueba proporcionada.',\n          example: `let isSmall = (el) => el < 10;<br>\n                    console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'si un elemento cumple o no al menos una condición',\n          desc:\n            'Devuelve true si al menos un elemento de este array satisface la función de prueba proporcionada.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n                    console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/es/index.js\n// module id = lx7K\n// module chunks = 1","module.exports = {\"short\":\"en\",\"long\":\"English\",\"createdBy\":\"sdras\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/en/meta.json\n// module id = mJJP\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'uno o più elementi in un array',\n        desc: 'Aggunge o rimuove elementi in un array.',\n        example: `arr.splice(2, 0, 'pizza');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'pizza', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'elementi alla fine di un array',\n        desc:\n          'Aggiunge uno o più elementi alla fine di un array e restituisce la sua nuova lunghezza.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'elementi all\\'inizio di un array',\n        desc:\n          'Aggiunge uno o più elementi all\\'inizio di un array e restituisce la sua nuova lunghezza.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'altri array o valori a un array',\n        desc:\n          'Restituisce un nuovo array composto da questo array unito ad altri array e/o valori.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'uno o più elementi da un array',\n        desc: 'Aggunge o rimuove elementi in un array.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'l\\'ultimo elemento di un array',\n        desc:\n          'Rimuove l\\'ultimo elemento di un array e restituisce tale elemento.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'il primo elemento di un array',\n        desc:\n          'Rimuove il primo elemento di un array e restituisce tale elemento.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'uno o più elementi da un array, lasciado intatto l\\'array originale',\n        desc:\n          'La funzione <code>slice()</code> restituisce una copia di parte di un array in un nuovo array, lasciando l\\'array originale intatto. Puoi specificare solo l\\'elemento di partenza, oppure sia quello di partenza che quello finale, separati da una virgola. L\\'array originale non viene modificato.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'unire tutti gli elementi di un array in una stringa',\n        desc: `Unisce tutti gli elementi di un arrya in una stringa. Puoi specificare cosa mettere fra gli elementi, altrimenti viene utilizzata una virgola.`,\n        example: `console.log(arr.join());<br>\n        console.log(arr.jion(\" - \"));`,\n        output: `\"5,1,8\"<br>\n        \"5 - 1 - 8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'ottenere una stringa che rappresenti l\\'array',\n        desc: 'Restituisce una stringa che rappresenta l\\'array e i suoi elementi',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'ottenere una stringa localizzata che rappresenti l\\'array',\n        desc: 'Questa è una functione particolare. Restituisce una stringa localizzata che rappresenta l\\'array e i suoi elementi; &egrave; molto utile quando si lavora con date o valute. Ha un funzionamento complesso, per cui si consiglia di consultare la documentazione quando la si usa.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString);<br>\n        console.log(dateString);`,\n        output: `\"5,1,8\"<br>\n        \"2/1/2018, 00:27:10\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'invertire l\\'ordine di un array',\n        desc:\n          'Inverte l\\'ordine degli elementi di un array, modificandolo: il primo diventa l\\'ultimo; l\\'ultimo diventa il primo.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'ordinare gli elementi di un array',\n        desc: `Ordina gli elementi di un array, modificandolo, e lo restituisce.<br>\n        <br>\n        <strong>Nota:</strong> Se non è specificata nessuna funzione per il confronto, gli elementi sono convertiti in stringhe e ordinati in ordine alfabetico, secondo i codici Unicode corrispondenti ai caratteri. Per esempio, \"Banana\" viene prima di \"ciliegia\". In ordine numerico 9 viene prima di 80, ma dal momento che sono convertiti in stringhe \"80\" viene prima di \"9\". Vedere la documentazione per ulteriori informazioni.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'conoscere la lunghezza di un array',\n        desc: 'Restituisce il numero di elementi contenuti in un array.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'sostituire tutti gli elementi di un array con un valore dato',\n        desc:\n          'Sostituisce tutti gli elementi di un array, da una posizione iniziale a una finale, con un valore specificato.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'copiare una sequenza di elementi all\\'interno di un array',\n        desc:\n          'Copia una sequenza di elementi di un array all\\'interno dell\\'array stesso. Si può specificare o solo l\\'elemento finale (in questo caso viene utilizzato il primo come iniziale), o sia quello iniziale che quello finale, separati da una virgola.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'eseguire una funzione da me definita per ogni elemento dell\\'array',\n        desc:\n          'Esegue una functione specificata una volta per ogni elemento di un array.',\n        example: `arr.forEach((elemento) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(elemento)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'creare un nuovo array trasformando ogni elemento con una funzione da me definita',\n        desc:\n          'Crea un nuovo array utilizzando i risultati ottenuti richiamando una funzione specificata per ogni elemento dell\\'array originale.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'creare un oggetto di tipo Array Iterator',\n        desc:\n          'Restituisce un nuovo oggetto Array Iterator che contiene le coppie chiave/valore per ogni elemento dell\\'array. Ci sono molti utilizzi per questo oggetto, e anche altri metodi da utilizzare insieme a <code>entries</code>, come <code>values</code> e <code>keys</code>.',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// 0 &egrave; il primo indice,</span><br>\n        <span class=\"comment\">// 5 &egrave; il primo numero</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'se un certo elemento esiste',\n          desc:\n            'Determina se un array contiene un certo elemento, restituendo <code>true</code> o <code>false</code>.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'la prima posizione di un elemento',\n          desc:\n            'Restituisce la prima posizione nella quale si trova un elemento uguale a quello specificato, o <code>-1</code> se non è presente.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'l\\'ultima posizione di un elemento',\n          desc:\n            'Restituisce l\\'ultima posizione (la maggiore) nella quale si trova un elemento uguale a quello specificato, o <code>-1</code> se non è presente.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'il primo elemento che soddisfa una condizione',\n          desc:\n            `Restituisce il primo valore dell'array che soddisfa la funzione specificata, o <code>undefined</code> se non ce n'è nessuno.<br>\n            &Egrave simile a <code>findIndex</code>, ma restituisce l'elemento anziché la sua posizione.`,\n          example: `let piccolo = (el) => el < 2;<br>\n          console.log(arr.find(piccolo));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'la posizione del primo elemento che soddisfa una condizione',\n          desc:\n            `Restituisce la posizione del primo valore dell'array che soddisfa la funzione specificata, o <code>-1</code> se non ce n'è nessuno.<br>\n            &Egrave simile a <code>find</code>, ma restituisce la posizione di un elemento anziché il suo valore.`,\n          example: `let grande = (el) => el > 6;<br>\n          console.log(arr.findIndex(grande));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'un valore a cui ridurre l\\'array, dall\\'inizio alla fine',\n          desc:\n            'Richiama una funzione con un accumulatore e ogni valore dell\\'array, da sinistra a destra, per ridurlo a un singolo valore.',\n          example: `let somma = (a, b) => a + b;<br>\n          console.log(arr.reduce(somma));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'un valore a cui ridurre l\\'array, dalla fine all\\'inizio',\n          desc:\n            'Richiama una funzione con un accumulatore e ogni valore dell\\'array, da destra a sinistra, per ridurlo a un singolo valore.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'i valori che rispettano una condizione specificata',\n          desc:\n            'Crea un nuovo array con tutti gli elementi dell\\'array originale per i quali la funzione di filtro specificata restituisce <code>true</code>.',\n          example: `let filtrato = arr.filter(el => el > 4);<br>\n          console.log(filtrato)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'se ogni elemento soddisfa una condizione',\n          desc:\n            'Restituisce <code>true</code> se ogni elemento in questo array soddisfa il test della funzione specificata.',\n          example: `let minoreDi10 = (el) => el < 10;<br>\n          console.log(arr.every(minoreDi10));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'se almeno un elemento soddisfa una condizione',\n          desc:\n            'Restituisce <code>true</code> se almeno un elemeto in questo array soddisfa il test della funzione specificata.',\n          example: `let maggioreDi4 = (el) => el > 4;<br>\n          console.log(arr.some(maggioreDi4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/it/index.js\n// module id = mfqg\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'element/en aan een array',\n        desc: 'Voegt een element toe aan een array of verwijderd een element van een array.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'element aan het einde van een array',\n        desc: 'Voegt een of meerdere elementen toe aan het einde van een array en geeft de nieuwe lengte van de array terug.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'element aan het begin van een array',\n        desc: 'Voegt een of meerdere elementen toe aan het begin van een array en geeft de nieuwe lengte van de array terug.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'deze array aan (een) andere array(s) en/of waarde(s)',\n        desc: 'Geeft een nieuwe array terug bestaande uit deze array samengevoegd met andere array(s) en/of waarde(s).',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'element/en van een array',\n        desc: 'Voegt een element toe aan een array of verwijderd een element van een array.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'laatste element van een array',\n        desc:\n          'Verwijderd het laatste element van een array en geeft dat element terug.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'the first element of the array',\n        shortDesc: 'het eerste element van een array',\n        desc:\n          'Verwijderd het eerste element van een array and geeft dat element terug.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc: 'een of meerdere elementen in de huidige volgorde, zonder dat de array wordt aangepast,',\n        desc:\n          'De <code>slice()</code> methode geeft een kopie van een gedeelte van de array terug in een nieuwe array. Je kan kiezen  voor het beginnende element (waar het einde standaard gelijk is aan de lengte van de array) opgeven of zowel het begin als einde opgeven, gescheiden met een komma. De orginele array wordt niet aangepast.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'alle elementen van een array samenvoegen als string',\n        desc: \n        `Voegt alle elementen van een array samen tot een string. Je kan het samenvoegen zoals het is of met iets er tussen, <code>elements.join(' - ')</code> gives you <code>foo-bar</code>.`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'een array weergeven als string',\n        desc: 'Geeft de array en de elementen daarvan weer als string.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'return a localized string representing the array.',\n        shortDesc: 'een array weergeven als taal string',\n        desc:\n          'Dit is een gekke. Deze functie geeft de array en de elementen daarvan weer als een taal string. Dit kan heel nuttig zijn voor datums en valuta en heeft wat vreemde abstracties, dus het beste is om de documentatie te raadplegen wanneer je deze functie gebruikt.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'de volgorde van een array omkeren',\n        desc:\n          'Keert de volgorde van de elementen in een array om waar het eerste element het laatste element wordt en vice versa.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'elementen van een array sorteren',\n        desc: 'Sorteert de elementen van een array en geeft de array vervolgens terug.',\n        desc: `Sorts the elements of an array in place and returns the array.<br>\n        <br>\n        <strong>Belangrijke opmerking:</strong> Als de compareFunction niet is toegepast, dan worden elementen gesorteerd door middel van conversie naar strings en worden deze vergeleken in Unicode code point volgorde. Bijvoorbeeld, \"Banaan\" komt voor \"kers\". In nummeriek volgorde, komt 9 voor 80, maar omdat nummers geconverteerd worden naar strings, komt \"80\" voor \"9\" in Unicode order. De documentatie heeft meer informatie om het te verduidelijken.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'de lengte van een array vinden',\n        desc: 'Geeft het aantal elementen in een array terug.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'Alle elementen van een array vullen met een statische waarde',\n        desc:\n          'Vult alle elementen van een array met een statische waarde.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'een kopie van de volgorde van array elementen maken binnen de array',\n        desc:\n          'Maakt een kopie van de volgorde van array elementen binnen de array. Je kan er voor kiezen om het eind element te kiezen (Waar het begin standaard 0 is) of zowel begin tot eind te kiezen, met een komma gescheiden. ',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'een functie uit te voeren voor elk element',\n        desc:\n          'De forEach() methode voert eenmalig een functie uit voor elk element in de array.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'een nieuwe array te maken van elk element met een functie die uitgevoerd wordt',\n        desc:\n          'Maakt een nieuwe array aan met het resultaat van de uitgevoerde functie van elk element in de array.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'een iteratie object aan te maken',\n        desc:\n          'Geeft een nieuw array iteratie object terug dat de sleutel/waarde koppelt voor elke index in de array. Er is veel mogelijk met intereren, in samenwerking met andere methodes, zoals ook  <code>values</code> en <code>keys</code>.',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'of een element bestaat in de array',\n          desc:\n            'Bepaald of een array een bepaald element bevat, en geeft vervolgens true of false terug voor de uitkomst.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'de eerste index van een bepaald element',\n          desc:\n            'Geeft de eerst komende index terug van het gegeven element, of geeft -1 terug als het element niet gevonden kan worden.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'de laatste index van een bepaald element',\n          desc:\n            'Geeft de laatst mogelijke index terug van het gegeven element, of geeft -1 terug als het element niet gevonden kan worden.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'het eerste element dat overeenkomt met de conditie',\n          desc:\n           'Geeft de waarde terug uit de array, als het element in de array overeenkomt met de conditie die aangegeven is, en geeft anders undefined terug als er geen element gevonden is. Ongeveerd hetzelfde als <code>findIndex()</code> maar dit geeeft de waarde van het element terug in plaats van de index.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'de eerste index van een element dat overeenkomt met de conditie',\n          desc:\n            'Geeft de index terug van het eerste element uit de array dat overeenkomt met de conditie die aangegeven is, en anders -1 terug geeft. Ongeveer hetzelfde als <code>find()</code>, maar dit geeft de index terug in plaats van de waarde van het element.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'een waarde door het verkleinen van de array, van begin tot eind',\n          desc:\n            'Pas een functie toe op een verzameling en elke waarde in de array (van links naar rechts) aan door het te verkleinen in een enkele waarde.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'een waarde door het verkleinen van de array, van eind tot begin',\n          desc:\n            'Pas een functie toe op een verzameling en elke waarde in de array (van rechts naar links) door het te verkleinen in een enkele waarde.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'waardes gebaseerd op een conditie die ik toepas',\n          desc:\n            'Maakt een nieuwe array met alle elementen van deze array waarbij de conditie overeenkomt en true terug geeft.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'of alle waardes in een array overeenkomen met de conditie die ik stel',\n          desc:\n            'Geeft true terug als elk element in de array overeenkomt met de opgegeven conditie.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'of een waarde in een array overeenkomt met de conditie die ik stel',\n          desc:\n            'Geeft true terug als er minimaal een element in de array overenekomt met de opgegeven conditie.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/nl/index.js\n// module id = oBQB\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'элемент(ы) в массив',\n        desc: 'Добавляет и/или удаляет элементы из массива.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'элемент(ы) в конец массива',\n        desc:\n          'Добавляет один или более элементов в конец массива и возвращает новую длину этого массива.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'элемент(ы) в начало массива',\n        desc:\n          'Добавляет один или более элементов в начало массива и возвращает длину этого массива.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'этот массив к другим массивам и/или значениям',\n        desc:\n          'Возвращает новый массив, составленный из этого массива и других массивов и/или значений.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'элементы из массива',\n        desc: 'Добавляет и/или удаляет элементы из массива.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'последний элемент массива',\n        desc:\n          'Удаляет последний элемент из массива и возвращает удалённый элемент.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'первый элемент массива',\n        desc:\n          'Удаляет первый элемент из массива и возвращает удалённый элемент.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'один или более элементов для использования, оставив массив неизменённым',\n        desc:\n          'Метод <code>slice()</code> возвращает поверхностную копию части массива как новый объект массива. Вы можете определить только начальный элемент (тогда концом будет взята длина массива) либо и начальный, и конечный элемент, разделённые запятой. Изначальный массив не будет изменён.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'объединить все элементы массива в строку',\n        desc: `Объединяет все элементы в строку. Вы можете объединить элементы по умолчанию или использовать разделитель, <code>elements.join(' - ')</code> вернёт <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'вернуть строку представляющую массив',\n        desc: 'Возвращает строку представляющую массив и его элементы.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'вернуть локализованную строку представлющую массив',\n        desc:\n          'Этот метод немного странный. Возвращает локализованную строку представлющую массив и его элементы. Это очень удобно для дат и денежных единиц, а также имеет некоторые необычные национальные абстракции, поэтому лучше обратиться к документации перед использованием.', example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'обратить порядок элементов массива',\n        desc:\n          'Обращает порядок элементов массива на месте — первый становится последним, а последний становится первым.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'отсортировать элементы массива',\n        desc: `Сортирует элементы массива на месте и возвращает этот массив.<br>\n        <br>\n        <strong>Важное замечание:</strong> Если compareFunction не определена, элементы будут отсортированы с предварительным приведением их к строковому типу в кодировке Unicode. Например, \"Banana\" будет идти до \"cherry\". При сортировке чисел, 9 идёт до 80, но поскольку числа конвертируются в строки, \"80\" идёт до \"9\" в порядке символов Unicode. В документации можно найти больше поясняющей информации.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'найти длину массива',\n        desc: 'Возвращает количество элементов в этом массиве.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'заполнить все элементы массива статическим значением',\n        desc:\n          'Заполняет все элементы массива, начиная со стартового и до конечного индекса, статическим значением',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'скопировать последовательность элементов внутри массива',\n        desc:\n          'Копирует последовательность элементов внутри массива. Вы можете определить только конечный элемент (тогда началом будет взят нуль) либо и начальный, и конечный элемент, разделённые запятой.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'выполняя функцию, которую я создам, над каждым элементом массива',\n        desc:\n          'Метод forEach() выполняет переданную функцию единожды для каждого элемента массива.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'создавая новый массив из элементов с помощью моей функции',\n        desc:\n          'Создаёт новый массив используя результаты вызова переданной функции для каждого элемента в этом массиве.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'создав объект-итератор',\n        desc:\n          'Возвращает новый объект-итератор для массива, который содержит пары ключ/значение для каждого индекса в этом массиве. Существует много способов использования этого итератора, а также методов, связаных с ним, таких как <code>values</code> и <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'существует ли определённый элемент',\n          desc:\n            'Определяет содержит ли массив определённый элемент, возвращает true или false как полагается.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'первый индекс определённого элемента',\n          desc:\n            'Возвращает первый индекс, в котором встречается данный элемент в массиве или -1, если элемента не существует.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'последний индекс определённого элемента',\n          desc:\n            'Возвращает последний (наибольший) индекс, в котором встречается данный элемент в массиве или -1, если элемента не существует.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'первый элемент соответствующий условию',\n          desc:\n            'Возвращает найденное в массиве значение, если элемент в массиве соответствует переданной тестирующей функции или undefined, если такой элемент не найден. Подобен <code>findIndex()</code>, но возвращает элемент вместо индекса.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'первый индекс элемента, соответствующего условию',\n          desc:\n            'Возвращает индекс первого элемента в массиве, который соответствует переданной тестирующей функции. В ином случае возвращает -1. Подобен <code>find()</code>, но возвращает индекс вместо элемента.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'значение, полученное сокращением массива, от начала до конца',\n          desc:\n            'Применить функцию к аккумулятору с каждым значением массива (слева направо), чтобы сократить его до единственного значения.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'значение, полученное сокращением массива, от конца к началу',\n          desc:\n            'Применить функцию к аккумулятору с каждым значением массива (справа налево), чтобы сократить его до единственного значения.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'значения, основываясь на условви, которое я создам',\n          desc:\n            'Создаёт новый массив со всеми элементами этого массива, для которых переданная фильтрующая функция возвращает true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'соответствует или нет каждый элемент условию',\n          desc:\n            'Возвращает true, если каждый элемент в этом массиве соответствует переданной тестирующей функции.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'соответствует или нет хотя бы один элемент условию',\n          desc:\n            'Возращает true, если хотя бы один элемент в этом массиве соответствует переданной тестирующей функции',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ru/index.js\n// module id = tprR\n// module chunks = 1","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'елемент(и) до масиву',\n        desc: 'Додає і/або видаляє елементи з масиву.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'елемент(и) у кінець масиву',\n        desc:\n          'Додає один чи більше елементів у кінець масиву и повертає новую довжину цього масиву.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'елемент(и) на початок масиву',\n        desc:\n          'Додає один чи більше елементів на початок масиву и повертає новую довжину цього масиву.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'цей масив до інших масивів і/чи значень',\n        desc:\n          'Повертає новий масив, створений із цього масиву та інших масивів і/чи значень.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'елемент(и) із масиву',\n        desc: 'Додає і/або видаляє елементи з масиву.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'останній елемент масиву',\n        desc:\n          'Видаляє останній елемент масиву та повертає його значення.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'перший елемент масиву',\n        desc:\n          'Видаляє перший елемент масиву та повертає його значення.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'один чи більше елементів для використання, залишивши масив незмінним',\n        desc:\n          'Метод <code>slice()</code> повертає поверхневу копію масиву як новий обʼєкт масиву. Ви можете визначити лише початковий елемент (де кінець буде приймати значення з довжини масиву) або початок і кінець, розділені комою. Початковий масив залишиться без змін.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'обʼєднати всі елементи масиву в стрічку',\n        desc: `Об'єднує всі елементи масиву в стрічку. Ви можете об'єднати елементи за умовчуванням або використати розділовий знак, <code>elements.join(' -\n          ')</code> повертає <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'повернути рядок, що представляє масив.',\n        desc: 'Повертає рядок, що представляє масив та його елементи.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'повернути локалізований рядок, що представляє масив.',\n        desc:\n          'Цей метод трохи дивний. Повертає локалізований рядок що представляє масив і його елементи. Це дуже зручно для дат і грошових одиниць, а також має деякі незвичайні національні абстракції, тому краще звернутися до документації перед використанням. ',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'інвертувати порядок елементів в масиві',\n        desc:\n          'Змінює порядок елементів масиву на місці - перший стає останнім, а останній стає першим.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'сортувати елементи масиву',\n        desc: `Сортує елементи масиву і повертає масив.<br>\n        <br>\n        <strong>Важлива примітка:</strong> Якщо compareFunction не вказано, елементи сортуються шляхом перетворення їх у рядки та порівняння рядків у порядку кодів Unicode. Наприклад, \"банан\" стане перед \"вишні\". У числовому стилі значення 9 стане до 80, але, оскільки числа перетворені в рядки, по \"Порядку Юнікоду\" \"80\" стане до \"9\". Документація має більше інформації для уточнення. `,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'знайти довжину масиву',\n        desc: 'Повертає кількість елементів у цьому масиві.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'заповнити всі елементи масиву статичним значенням',\n        desc:\n          'Заповнює всі елементи масиву від початкового індексу до кінцевого індексу зі статичним значенням.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'копіювати послідовність елементів масиву в масиві.',\n        desc:\n          'Копіює послідовність елементів масиву в масиві. Ви можете вказати або тільки кінцевий елемент (де початок буде за замовчуванням до нуля) або як початок, так і кінець, розділені комами. ',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'виконуючи функцію, яку я створив для кожного елемента',\n        desc:\n          'Метод forEach () виконує надану функцію один раз для кожного елемента масиву.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'створення нового масиву з кожного елемента з функцією, яку я створюю',\n        desc:\n          'Створює новий масив з результатами виклику передбаченої функції на кожен елемент цього масиву.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: `створення об'єкта ітератора`,\n        desc:\n          `Повертає новий об'єкт Array Iterator, який містить пари ключ / значення для кожного індексу в масиві. Для ітераторів існує безліч застосувань, а також інші способи, що використовуються разом з ним, як, наприклад<code>values</code> та <code>keys</code>`,\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// 0 це індекс,</span><br>\n        <span class=\"comment\">// 5 значення за індексом</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'чи певний елемент існує',\n          desc:\n            'Визначає, чи містить масив певний елемент, при необхідності повертаючи true або false.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'перший індекс певного елемента',\n          desc:\n            'Повертає перший індекс, за яким даний елемент може бути знайдено в масиві, або -1, якщо його немає.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'останній індекс конкретного елемента',\n          desc:\n            'Повертає останній (найбільший) індекс елемента в масиві, який дорівнює вказаному значенню, або -1, якщо нічого не знайдено.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'перший елемент, який задовольняє умовам',\n          desc:\n            'Повертає знайдене значення в масиві, якщо елемент у масиві задовольняє надану функцію тестування або не визначено, якщо не знайдено. Схожий на<code>findIndex()</code>, але він повертає елемент замість індексу.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'перший індекс елемента, який задовольняє умовам',\n          desc:\n            'Повертає індекс першого елемента в масиві, який задовольняє надану функцію тестування. В іншому випадку -1 повертається. Схожий на<code>find()</code>, але він повертає індекс замість елементу.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'значення за допомогою зменшення масиву, від початку до закінчення',\n          desc:\n            'Застосувати функцію до акумулятора та кожного значення масиву (зліва направо), щоб зменшити його до одного значення.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'значення за допомогою зменшення масиву, від закінчення до початку',\n          desc:\n            'Застосувати функцію проти акумулятора та кожного значення масиву (справа наліво), щоб зменшити його до одного значення.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'значення на основі умови яку я створюю',\n          desc:\n            'Створює новий масив з усіма елементами цього масиву, для якого надана функція фільтрування повертає true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'чи не кожен елемент задовольняє умовам',\n          desc:\n            'Повертає true, якщо кожен елемент цього масиву задовольняє надану функцію тестування.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'чи принаймні один предмет задовольняє умовам',\n          desc:\n            'Повертає true, якщо принаймні один елемент цього масиву задовольняє надану функцію тестування.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/ua/index.js\n// module id = uoDV\n// module chunks = 1","import Vue from 'vue'\nimport Vuex from 'vuex'\nimport vuexI18n from 'vuex-i18n'\n\n// import languages (only state translations)\nimport ar from './ar/index'\nimport bg from './bg/index'\nimport es from './es/index'\nimport en from './en/index'\nimport de from './de/index'\nimport fr from './fr/index'\nimport nl from './nl/index'\nimport pt from './pt/index'\nimport zh_cn from './zh_cn/index'\nimport sr from './sr/index'\nimport cz from './cz/index'\nimport ru from './ru/index'\nimport id from './id/index'\nimport it from './it/index'\nimport ua from './ua/index'\nimport el from './el/index'\nimport tr from './tr/index'\nimport ja from './ja/index'\n\n// import translations of labels\nimport translationsAr from '../src/locale/ar/index'\nimport translationsBg from '../src/locale/bg/index'\nimport translationsEn from '../src/locale/en/index'\nimport translationsEs from '../src/locale/es/index'\nimport translationsDe from '../src/locale/de/index'\nimport translationsFr from '../src/locale/fr/index'\nimport translationsNl from '../src/locale/nl/index'\nimport translationsPt from '../src/locale/pt/index'\nimport translationsZhCn from '../src/locale/zh_cn/index'\nimport translationsCz from '../src/locale/cz/index'\nimport translationsRu from '../src/locale/ru/index'\nimport translationsUa from '../src/locale/ua/index'\nimport translationsId from '../src/locale/id/index'\nimport translationsSr from '../src/locale/sr/index'\nimport translationsIt from '../src/locale/it/index'\nimport translationsEl from '../src/locale/el/index'\nimport translationsTr from '../src/locale/tr/index'\nimport translationsJa from '../src/locale/ja/index'\n\n// create info about langauges\nconst languages = (ctx => {\n  let keys = ctx.keys()\n  let values = keys.map(ctx)\n  // return keys.reduce((o, k, i) => { o[k] = values[i]; return o; }, {});\n  const metaFiles = keys.filter((key, val) => key.endsWith('json'))\n  let res = {}\n  metaFiles.forEach(key => {\n    const index = keys.indexOf(key)\n    const meta = values[index]\n    res[meta.short] = {\n      long: meta.long\n    }\n  })\n  return res\n})(require.context('./', true, /[a-z]{2}/))\n\nVue.use(Vuex)\n\nconst mutations = {\n  selectionMethod(state, selected) {\n    state.selectedMethod = selected\n  },\n  resetSelection(state) {\n    state.selectedMethod = ''\n  },\n  changeLanguage(state, newLang) {\n    state.curLanguage = newLang\n    Vue.i18n.set(newLang)\n  }\n}\n\nexport const store = new Vuex.Store({\n  modules: {\n    ar,\n    bg,\n    es,\n    en,\n    de,\n    fr,\n    nl,\n    pt,\n    zh_cn,\n    id,\n    sr,\n    cz,\n    ru,\n    ua,\n    id,\n    it,\n    el,\n    tr,\n    ja\n  },\n  state: {\n    selectedMethod: undefined,\n    curLanguage: 'en',\n    languages\n  },\n  mutations\n})\n\nVue.use(vuexI18n.plugin, store)\n\n// add translations directly to the application\nVue.i18n.add('ar', translationsAr)\nVue.i18n.add('bg', translationsBg)\nVue.i18n.add('en', translationsEn)\nVue.i18n.add('es', translationsEs)\nVue.i18n.add('de', translationsDe)\nVue.i18n.add('fr', translationsFr)\nVue.i18n.add('nl', translationsNl)\nVue.i18n.add('pt', translationsPt)\nVue.i18n.add('zh_cn', translationsZhCn)\nVue.i18n.add('cz', translationsCz)\nVue.i18n.add('ru', translationsRu)\nVue.i18n.add('ua', translationsUa)\nVue.i18n.add('id', translationsId)\nVue.i18n.add('sr', translationsSr)\nVue.i18n.add('it', translationsIt)\nVue.i18n.add('el', translationsEl)\nVue.i18n.add('tr', translationsTr)\nVue.i18n.add('ja', translationsJa)\n\nVue.i18n.set(store.state.curLanguage)\n\n// registering only the current language\n// would be also possible but unloading & loading would be required\n// at language change --> can be added later (for now load all langauges)\n// store.registerModule('de', de);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/index.js\n// module id = null\n// module chunks = ","export default {\n  firstMethod: 'لدي مجموعة، أود',\n  findMethod: 'أحاول أن أجد',\n  methodOptions: 'أنا بحاجة لــ',\n  methodTypes: {\n    add: 'إضافة',\n    remove: 'إزالة',\n    find: 'بحث',\n    'iterate by': 'يتكرر من قبل',\n    string: ' سلسلة'\n  },\n  singleItem: 'عنصر واحد',\n  manyItems: 'واحد أو العديد من العناصر',\n  primaryOptions: [\n    'إضافة عناصر أو صفائف أخرى',\n    'إزالة العناصر',\n    'العثور على العناصر',\n    'المشي على العناصر',\n    'إرجاع سلسلة',\n    'ترتيب مصفوفة',\n    'شيء آخر'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/ar/index.js","export default {\n  firstMethod: 'Имам масив, бих искал да', // I have an array, I would like to\n  findMethod: 'Опитвам се да намеря', // I'm trying to find\n  methodOptions: 'Tрябва да',\n  methodTypes: {\n    add: 'добавя',\n    remove: 'премахна',\n    find: 'намеря',\n    'iterate by': 'обходя',\n    string: 'низ'\n  },\n  singleItem: 'един елемент', // one item\n  manyItems: 'един или много елементи', // one or many items\n  primaryOptions: [\n    'добавя елементи или други масиви', // add items or other arrays\n    'премахна елементи', // remove items\n    'намеря елементи', // find items\n    'премина през елементите', // walk over items\n    'върна низ', // return a string\n    'сортирам масив', // order an array\n    'нещо друго' // something else\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/bg/index.js","export default {\n  firstMethod: 'I have an array, I would like to',\n  findMethod: \"I'm trying to find\",\n  methodOptions: 'I need to',\n  methodTypes: {\n    add: 'add',\n    remove: 'remove',\n    find: 'find',\n    'iterate by': 'iterate by',\n    'string': 'string'\n  },\n  singleItem: 'one item',\n  manyItems: 'one or many items',\n  primaryOptions: [\n    'add items or other arrays',\n    'remove items',\n    'find items',\n    'walk over items',\n    'return a string',\n    'order an array',\n    'something else'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/en/index.js","export default {\n    firstMethod: 'Tengo un array, me gustaría',\n    findMethod: \"Estoy intentando encontrar\",\n    methodOptions: 'Necesito que',\n    methodTypes: {\n        add: 'agregar',\n        remove: 'eliminar',\n        find: 'buscar',\n        'iterate by': 'iterar con',\n        'string': 'Cadena de caracteres'\n    },\n    singleItem: 'un elemento',\n    manyItems: 'uno o mas elementos',\n    primaryOptions: [\n            'agregar elementos u otros arrays',\n            'eliminar elementos',\n            'buscar elementos',\n            'pasar entre elementos',\n            'devolver una cadena de caracteres',\n            'ordenar un array',\n            'cualquier otra cosa'\n        ]\n        // other text can be added here\n}\n\n\n// WEBPACK FOOTER //\n// ./src/locale/es/index.js","export default {\n  firstMethod: 'Ich habe einen Array und würde gerne', //'I have an array, I would like to',\n  findMethod: 'Ich möchte', // \"I'm trying to find\"\n  methodOptions: 'Ich muss',\n  methodTypes: {\n    add: '',\n    remove: '',\n    find: '',\n    'iterate by': '',\n    'string': 'String zurückgeben'\n  },\n  singleItem: 'ein Element finden', // 'one item',\n  manyItems: 'ein oder mehrere Elemente finden', // 'one or many items',\n  primaryOptions: [\n    'Elemente oder Arrays hinzufügen', // ich würde gerne i would like to ... add items or other arrays\n    'Elemente entfernen',\n    'Elemente finden',\n    'Elemente durchlaufen',\n    'einen String zurückgeben',\n    'einen Array sortieren',\n    'etwas anderes machen'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/de/index.js","export default {\n  firstMethod: 'J\\'ai un tableau, je voudrais',\n  findMethod: 'J\\'essaye de trouver',\n  methodOptions: 'J\\'ai besoin',\n  methodTypes: {\n    add: 'd\\'ajouter',\n    remove: 'de supprimer',\n    find: 'de chercher',\n    'iterate by': 'd\\'itérer en',\n    'string': 'chaîne de caractères'\n  },\n  singleItem: 'un élément',\n  manyItems: 'un ou plusieurs éléments',\n  primaryOptions: [\n    'ajouter des éléments',\n    'supprimer des éléments',\n    'chercher des éléments',\n    'parcourir les éléments',\n    'retourner une chaîne de caractères',\n    'trier les éléments',\n    'faire autre chose'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/fr/index.js","export default {\n  firstMethod: 'Ik heb een array, ik wil graag',\n  findMethod: \"Ik ben op zoek naar\",\n  methodOptions: 'Ik moet',\n  methodTypes: {\n    add: 'toevoegen',\n    remove: 'verwijderen',\n    find: 'zoeken',\n    'iterate by': 'itereren door',\n    'string': 'string'\n  },\n  singleItem: 'een enkel element',\n  manyItems: 'een of meerdere elementen',\n  primaryOptions: [\n    'een element of een andere array toevoegen',\n    'elementen verwijderen',\n    'elementen zoeken',\n    'door elementen heen loopen',\n    'een string teruggeven',\n    'een array ordenen',\n    'iets anders'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/nl/index.js","export default {\n  firstMethod: 'Eu tenho um array e gostaria de:',\n  findMethod: \"Eu estou tentando encontrar\",\n  methodOptions: 'Eu preciso',\n  methodTypes: {\n    add: 'adicionar',\n    remove: 'remover',\n    find: 'procurar',\n    'iterate by': 'iterar',\n    'string': 'string'\n  },\n  singleItem: 'um item',\n  manyItems: 'um ou mais itens',\n  primaryOptions: [\n    'adicionar um item ou outro array',\n    'remover itens',\n    'procurar itens',\n    'iterar sobre os itens',\n    'retornar uma string',\n    'ordernar os itens',\n    'nenhuma das opções'\n  ]\n}\n\n\n// WEBPACK FOOTER //\n// ./src/locale/pt/index.js","export default {\n  firstMethod: '我有一个数组，我想',\n  findMethod: '我想查找',\n  methodOptions: '我需要',\n  methodTypes: {\n    add: '添加',\n    remove: '移除',\n    find: '查找',\n    'iterate by': '',\n    'string': '字符串'\n  },\n  singleItem: '一个元素',\n  manyItems: '一个或多个元素',\n  primaryOptions: [\n    '添加元素或别的数组',\n    '移除元素',\n    '查找元素',\n    '对每个元素进行操作',\n    '返回字符串',\n    '对数组排序',\n    '其它'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/zh_cn/index.js","export default {\n  firstMethod: 'Mám pole a chci',\n  findMethod: \"Snažím se najít\",\n  methodOptions: 'Potřebuji',\n  methodTypes: {\n    add: 'přidat',\n    remove: 'odebrat',\n    find: 'nalézt',\n    'iterate by': 'projít pomocí',\n    'string': 'řetězec'\n  },\n  singleItem: 'jeden prvek',\n  manyItems: 'jeden nebo více prvků',\n  primaryOptions: [\n    'přidat prvky nebo jiná pole',\n    'odebrat prvky',\n    'najít prvky',\n    'projít prvky',\n    'vrátit řetězec',\n    'seřadit pole',\n    'něco jiného'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/cz/index.js","export default {\n  firstMethod: 'У меня есть массив, я хотел бы',\n  findMethod: 'Я пытаюсь найти',\n  methodOptions: 'Мне нужно',\n  methodTypes: {\n    add: 'добавить',\n    remove: 'удалить',\n    find: 'найти',\n    'iterate by': 'пройти',\n    'string': 'строка'\n  },\n  singleItem: 'один элемент',\n  manyItems: 'один или более элементов',\n  primaryOptions: [\n    'добавить элементы или другие массивы',\n    'удалить элементы',\n    'найти элементы',\n    'пройти по элементам',\n    'получить строку',\n    'упорядочить массив',\n    'другое'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/ru/index.js","export default {\n  firstMethod: 'У мене є масив, я хотів би',\n  findMethod: \"Я намагаюсь знайти\",\n  methodOptions: 'Мені потрібно',\n  methodTypes: {\n    add: 'додати',\n    remove: 'remove',\n    find: 'видалити',\n    'iterate by': 'ітеруватися',\n    'string': 'стрічка'\n  },\n  singleItem: 'один елемент',\n  manyItems: 'один чи більше елементів',\n  primaryOptions: [\n    'додати елементи або інші масиви',\n    'видалити елементи',\n    'знайти елементи',\n    'пройти по елементам',\n    'повернути рядок',\n    'сортувати масив',\n    'інше'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/ua/index.js","export default {\n  firstMethod: 'Saya mempunyai array, saya ingin',\n  findMethod: \"Saya ingin mencari\",\n  methodOptions: 'Saya perlu untuk',\n  methodTypes: {\n    add: 'menambah',\n    remove: 'menghapus',\n    find: 'menemukan',\n    'iterate by': 'melakukan iterasi dengan',\n    'string': 'string'\n  },\n  singleItem: 'sebuah item',\n  manyItems: 'satu atau banyak item',\n  primaryOptions: [\n    'menambah item atau array lain',\n    'menghilangkan item',\n    'menemukan item',\n    'melakukan iterasi terhadap item',\n    'mengembalikan sebuah string',\n    'mengurutkan sebuah array',\n    'lainnya'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/id/index.js","export default {\n  firstMethod: 'Imam niz, želeo/la bih da',\n  findMethod: \"Pokušavam da pronađem\",\n  methodOptions: 'Želeo/la bih',\n  methodTypes: {\n    add: 'da dodam',\n    remove: 'da uklonim',\n    find: 'da pronađem',\n    'iterate by': 'iteriram po',\n    'string': 'string'\n  },\n  singleItem: 'jednom elementu',\n  manyItems: 'jednom ili više elemenata',\n  primaryOptions: [\n    'dodam elemente ili druge nizove',\n    'uklonim elemente',\n    'pronađem elemente',\n    'pređem preko elemenata',\n    'vratim string',\n    'sortiram niz',\n    'nešto drugo'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/sr/index.js","export default {\n  firstMethod: 'Ho un array e vorrei',\n  findMethod: 'Sto cercando',\n  methodOptions: 'Voglio',\n  methodTypes: {\n    add: 'aggiungere',\n    remove: 'togliere',\n    find: 'trovare',\n    'iterate by': '',\n    'string': ''\n  },\n  singleItem: 'un elemento',\n  manyItems: 'uno o più elementi',\n  primaryOptions: [\n    'aggiungere elementi o altri array',\n    'rimuovere elementi',\n    'cercare uno o più valori',\n    'visitarne gli elementi',\n    'generare una stringa',\n    'riordinarlo',\n    'fare qualcos\\'altro'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/it/index.js","export default {\n  firstMethod: 'Έχω έναν πίνακα, θα ήθελα να',\n  findMethod: \"Προσπαθώ να βρω\",\n  methodOptions: 'Θέλω να',\n  methodTypes: {\n    add: 'προσθέσω',\n    remove: 'αφαιρέσω',\n    find: 'βρω',\n    'iterate by': '',\n    'string': 'αλφαριθμητικό'\n  },\n  singleItem: 'ένα στοιχείο',\n  manyItems: 'ένα ή περισσότερα στοιχεία',\n  primaryOptions: [\n    'προσθέσω στοιχεία ή άλλους πίνακες',\n    'αφαιρέσω στοιχεία',\n    'βρω στοιχεία',\n    'διατρέξω τα στοιχεία',\n    'επιστρέψω έναν πίνακα',\n    'ταξινομήσω τον πίνακα',\n    'κάτι διαφορετικό'\n  ]\n  // other text can be added here\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/locale/el/index.js","export default {\n    firstMethod: 'Elimde bir dizim var, Bununla şunu yapmak istiyorum: ',\n    findMethod: \"Şunu bulmaya çalışıyorum: \",\n    methodOptions: 'Diziyle yapacağım şey, ',\n    methodTypes: {\n      add: 'ekleme işlemi',\n      remove: 'silme işlemi',\n      find: 'arama işlemi',\n      'iterate by': 'tekrarla',\n      'string': 'string'\n    },\n    singleItem: 'tek eleman',\n    manyItems: 'tek veya daha fazla eleman',\n    primaryOptions: [\n      'eleman eklemek',\n      'eleman silmek',\n      'eleman aramak',\n      'elemanlar üzerinden işlem yapmak',\n      'geriye string döndürmek',\n      'diziyi sıralamak',\n      'başka bir şey'\n    ]\n  }\n  \n\n\n// WEBPACK FOOTER //\n// ./src/locale/tr/index.js","export default {\n    firstMethod: '配列に対し、私は',\n    findMethod: \"右記を対象に: \",\n    methodOptions: '次のことをやりたいです: ',\n    methodTypes: {\n      add: '',\n      remove: '',\n      find: '',\n      'iterate by': '',\n      'string': ''\n    },\n    singleItem: '一つの要素',\n    manyItems: '一つ以上の要素',\n    primaryOptions: [\n      '要素または他の配列を追加して',\n      '要素を削除して',\n      '要素を検索して',\n      '繰り返し処理で',\n      '文字列の取得で',\n      '配列を並べ替えて',\n      'その他の処理で'\n    ]\n    // other text can be added here\n  }\n  \n\n\n// WEBPACK FOOTER //\n// ./src/locale/ja/index.js","export default {\n  state: {\n    selectedMethod: '',\n    adding: [\n      {\n        name: 'splice',\n        shortDesc: 'prvek nebo prvky z/do pole',\n        desc: 'Přidá anebo odebere prvky z pole.',\n        example: `arr.splice(2, 0, 'tacos');<br>\n        console.log(arr);`,\n        output: `[5, 1, 'tacos', 8]`\n      },\n      {\n        name: 'push',\n        shortDesc: 'prvky na konec pole',\n        desc:\n          'Přidá jeden nebo více prvků na konec pole a vrátí novou délku pole.',\n        example: `arr.push(2);<br>\n        console.log(arr);`,\n        output: '[5, 1, 8, 2]'\n      },\n      {\n        name: 'unshift',\n        shortDesc: 'prvky na začátek pole',\n        desc:\n          'Přidá jeden nebo více prvků na začátek pole a vrátí novou délku pole.',\n        example: `arr.unshift(2, 7);<br>\n        console.log(arr);`,\n        output: '[2, 7, 5, 1, 8]'\n      },\n      {\n        name: 'concat',\n        shortDesc: 'toto pole k jinému poli/polím anebo hodnotě/hodnotám',\n        desc:\n          'Vrátí nové pole skládající z tohoto pole a jiných polí anebo hodnot.',\n        example: `let arr2 = ['a', 'b', 'c'];<br>\n        let arr3 = arr.concat(arr2);<br>\n        console.log(arr3);`,\n        output: `[5, 1, 8, 'a', 'b', 'c']`\n      }\n    ],\n    removing: [\n      {\n        name: 'splice',\n        shortDesc: 'prvek nebo prvky z pole',\n        desc: 'Přidá anebo odebere prvky z pole.',\n        example: `arr.splice(2, 1);<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'pop',\n        shortDesc: 'poslední prvek pole',\n        desc:\n          'Odebere poslední prvek z pole a vrátí odebraný prvek.',\n        example: `arr.pop();<br>\n        console.log(arr);`,\n        output: `[5, 1]`\n      },\n      {\n        name: 'shift',\n        shortDesc: 'první prvek pole',\n        desc:\n          'Odebere první prvek z pole a vrátí odebraný prvek.',\n        example: `arr.shift();<br>\n        console.log(arr);`,\n        output: `[1, 8]`\n      },\n      {\n        name: 'slice',\n        shortDesc:\n          'jeden nebo více prvků pro práci beze změny pole',\n        desc:\n          '<code>slice()</code> metoda vrací mělkou kopii části pole do nového pole. Lze specifikovat buď pouze počáteční prvek s tím, že konec se nastaví na délku pole, anebo konec i začátek oddělené čárkou. Původní pole zůstává beze změny.',\n        example: `let slicedArr = arr.slice(1);<br>\n        console.log(arr);<br>\n        console.log(slicedArr);`,\n        output: `[5, 1, 8]<br>\n        [1, 8]`\n      }\n    ],\n    string: [\n      {\n        name: 'join',\n        shortDesc: 'spojit všechny prvky do jednoho řetezce',\n        desc: `Spojí všechny prvky pole do jednoho řetezce. Lze je spojit dohromady nebo mezi ně něco vložit, <code>elements.join(' -\n          ')</code> vrátí <code>foo-bar</code>`,\n        example: `console.log(arr.join());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toString',\n        shortDesc: 'vrátit řetězec reprezentující pole',\n        desc: 'Vrací řetězec reprezentující pole a jeho prvky.',\n        example: `console.log(arr.toString());`,\n        output: `\"5,1,8\"`\n      },\n      {\n        name: 'toLocaleString',\n        shortDesc: 'vrátit lokalizovaný řetězec reprezentující pole',\n        desc:\n          'Tato metoda je divná. Vrací lokalizovaný řetězec reprezentující pole a jeho prvky. To je často použitelné pro data a měny, ale má podivné vestavěné abstrakce, takže před použitím je vhodné se poradit s dokumentací.',\n        example: `let date = [new Date()];<br>\n        const arrString = arr.toLocaleString();<br>\n        const dateString = date.toLocaleString();<br>\n        console.log(arrString, dateString);`,\n        output: `\"5,1,8 12/26/2017, 6:54:49 PM\"`\n      }\n    ],\n    ordering: [\n      {\n        name: 'reverse',\n        shortDesc: 'obrátit pořadí v poli',\n        desc:\n          'Obrátí pořadí prvků pole - první bude poslední a poslední první.',\n        example: `arr.reverse();<br>\n        console.log(arr);`,\n        output: `[8, 1, 5]`\n      },\n      {\n        name: 'sort',\n        shortDesc: 'seřadit prvky pole',\n        desc: `Seřadí prvky pole a vrátí seřazené pole.<br>\n                <br>\n                <strong>Důležitá poznámka:</strong> Pokud není porovnávací funkce dodána, compareFunction, tak jsou prvky převedeny na řetězce a ty se porovnávají podle pořadí v Unicode. Např. \"Malina\" bude před \"jahodou\". U čísel, 9 je před 80, ale protože jsou čísla převedena na řetězce, tak \"80\" je před \"9\" podle Unicode pořadí. Dokumentace obsahuje další objasňující informace.`,\n        example: `arr.sort();<br>\n        console.log(arr);`,\n        output: `[1, 5, 8]`\n      }\n    ],\n    other: [\n      {\n        name: 'length',\n        shortDesc: 'zjistit délku pole',\n        desc: 'Vrátí počet prvků v poli.',\n        example: `console.log(arr.length);`,\n        output: `3`\n      },\n      {\n        name: 'fill',\n        shortDesc: 'přiřadit všem prvkům pole statickou hodnotu',\n        desc:\n          'Přiřadí všem prvkům pole statickou hodnotu.',\n        example: `arr.fill(2);<br>\n        console.log(arr);`,\n        output: `[2, 2, 2]`\n      },\n      {\n        name: 'copyWithin',\n        shortDesc: 'zkopírovat řadu prvků v poli uvnitř pole',\n        desc:\n          'Zkopíruje řadu prvků pole uvnitř pole. Lze specifikovat buď koncový prvek, kde počáteční pozice je nula, anebo počateční i koncový prvek, oddělené čárkou.',\n        example: `arr.copyWithin(1);<br>\n        console.log(arr);`,\n        output: `[5, 5, 1]`\n      }\n    ],\n    iterate: [\n      {\n        name: 'forEach',\n        shortDesc: 'spuštění funkce nad každým prvkem',\n        desc:\n          'forEach() metoda spustí předdefinovanou funkci jednou nad každým prvkem pole.',\n        example: `arr.forEach((element) => {<br>\n        <span>&nbsp;&nbsp;</span>console.log(element)<br>\n        });`,\n        output: `5<br>\n        1<br>\n        8`\n      },\n      {\n        name: 'map',\n        shortDesc:\n          'funkce, která vytvoří nové pole ze všech prvků',\n        desc:\n          'Vytvoří nové pole, které je výsledkem volání definované funkce nad každým prvkem.',\n        example: `let map = arr.map(x => x + 1);<br>\n        console.log(map);`,\n        output: `[6, 2, 9]`\n      },\n      {\n        name: 'entries',\n        shortDesc: 'iteračního objektu',\n        desc:\n          'Vrátí nový iterátor pole, který obsahuje klíč-hodnota pár pro každou pozici v poli. Iterátor má mnoho případů užití jak samostatně, tak ve spojení s jinými metodami jako <code>values</code> nebo <code>keys</code>',\n        example: `let iterator = arr.entries();<br>\n        console.log(iterator.next().value);`,\n        output: `[0, 5]<br>\n        <span class=\"comment\">// the 0 is the index,</span><br>\n        <span class=\"comment\">// the 5 is the first number</span>`\n      }\n    ],\n    find: {\n      single: [\n        {\n          name: 'includes',\n          shortDesc: 'prvek pokud existuje',\n          desc:\n            'Zjistí jestli existuje daný prvek v poli a podle toho vrátí true nebo false.',\n          example: `console.log(arr.includes(1));`,\n          output: `true`\n        },\n        {\n          name: 'indexOf',\n          shortDesc: 'první výskyt daného prvku',\n          desc:\n            'Vrátí první výskyt daného prvku nebo -1 pokud prvek nenalezne.',\n          example: `console.log(arr.indexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'lastIndexOf',\n          shortDesc: 'poslední výskyt daného prvku',\n          desc:\n            'Vrátí poslední výskyt daného prvku nebo -1 pokud prvek nenalezne.',\n          example: `console.log(arr.lastIndexOf(5));`,\n          output: `0`\n        },\n        {\n          name: 'find',\n          shortDesc: 'první prvek, který splňuje podmínku',\n          desc:\n            'Vrátí nalezenou hodnotu v poli, pokud prvek v poli odpovídá definované testovací funkci nebo undefined pokud nenalezne. Podobné jako <code>findIndex()</code>, ale vrací prvek místo pozice.',\n          example: `let isTiny = (el) => el < 2;<br>\n          console.log(arr.find(isTiny));`,\n          output: `1`\n        },\n        {\n          name: 'findIndex',\n          shortDesc: 'první výskyt prvku, který splňuje podmínku',\n          desc:\n            'Vrátí pozici prvního prvku v poli, který splňuje definovanou testovací funkci. V ostatních případech vrací -1. Podobné jako <code>find()</code>, ale vrací pozici místo prvku.',\n          example: `let isBig = (el) => el > 6;<br>\n          console.log(arr.findIndex(isBig));`,\n          output: `2`\n        },\n        {\n          name: 'reduce',\n          shortDesc: 'hodnotu po redukci pole z leva do prava',\n          desc:\n            'Použije funkci na střadač (accumulator) a každou hodnotu pole (z leva do prava) redukuje do jedné hodnoty.',\n          example: `let reducer = (a, b) => a + b;<br>\n          console.log(arr.reduce(reducer));`,\n          output: `14`\n        },\n        {\n          name: 'reduceRight',\n          shortDesc: 'hodnotu po redukci pole z prava do leva',\n          desc:\n            'Použije funkci na střadač (accumulator) a každou hodnotu pole (z prava do leva) redukuje do jedné hodnoty.',\n          example: `[arr, [0, 1]].reduceRight((a, b) => {<br>\n          <span>&nbsp;&nbsp;</span>return a.concat(b)<br>\n          }, [])`,\n          output: `[0, 1, 5, 1, 8]`\n        }\n      ],\n      many: [\n        {\n          name: 'filter',\n          shortDesc: 'hodnoty, které splňují mnou vytvořenou podmínku',\n          desc:\n            'Vytvoří nové pole se všemi prvky pole, pro které definovaná filtrovací funkce vrátí hodnotu true.',\n          example: `let filtered = arr.filter(el => el > 4);<br>\n          console.log(filtered)`,\n          output: `[5, 8]`\n        },\n        {\n          name: 'every',\n          shortDesc: 'jestli všechny prvky splňují podmínku',\n          desc:\n            'Vrací true pokud každý prvek odpovídá definované testovací funkci.',\n          example: `let isSmall = (el) => el < 10;<br>\n          console.log(arr.every(isSmall));`,\n          output: `true`\n        },\n        {\n          name: 'some',\n          shortDesc: 'jestli alespoň jeden prvek splňuje podmínku',\n          desc:\n            'Vrací true pokud alespoň jeden prvek odpovídá definované testovací funkci.',\n          example: `let biggerThan4 = (el) => el > 4;<br>\n          console.log(arr.some(biggerThan4));`,\n          output: `true`\n        }\n      ]\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./store/cz/index.js\n// module id = vsdj\n// module chunks = 1"],"sourceRoot":""}